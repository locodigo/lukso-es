"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[1162],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>m});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),c=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},u=function(e){var a=c(e.components);return n.createElement(i.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return t?n.createElement(f,o(o({ref:a},u),{},{components:t})):n.createElement(f,o({ref:a},u))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>o});var n=t(7294),r=t(6010);const s="tabItem_Ymn6";function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>w});var n=t(7462),r=t(7294),s=t(6010),o=t(2466),l=t(6775),i=t(1980),c=t(7392),u=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function p(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??d(t);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function f(e){let{queryString:a=!1,groupId:t}=e;const n=(0,l.k6)(),s=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i._X)(s),(0,r.useCallback)((e=>{if(!s)return;const a=new URLSearchParams(n.location.search);a.set(s,e),n.replace({...n.location,search:a.toString()})}),[s,n])]}function v(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,s=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:s}))),[i,c]=f({queryString:t,groupId:n}),[d,v]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,s]=(0,u.Nk)(t);return[n,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:n}),k=(()=>{const e=i??d;return m({value:e,tabValues:s})?e:null})();(0,r.useEffect)((()=>{k&&l(k)}),[k]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),v(e)}),[c,v,s]),tabValues:s}}var k=t(2389);const b="tabList__CuJ",y="tabItem_LNqP";function g(e){let{className:a,block:t,selectedValue:l,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const a=e.currentTarget,t=u.indexOf(a),n=c[t].value;n!==l&&(d(a),i(n))},m=e=>{var a;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}null==(a=t)||a.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,key:a,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,s.Z)("tabs__item",y,null==o?void 0:o.className,{"tabs__item--active":l===a})}),t??a)})))}function h(e){let{lazy:a,children:t,selectedValue:n}=e;if(a){const e=t.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function P(e){const a=v(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",b)},r.createElement(g,(0,n.Z)({},e,a)),r.createElement(h,(0,n.Z)({},e,a)))}function w(e){const a=(0,k.Z)();return r.createElement(P,(0,n.Z)({key:String(a)},e))}},3681:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var n=t(7462),r=(t(7294),t(3905)),s=t(4866),o=t(5162);const l={sidebar_label:"Transferir un Activo Digital LSP7 (Token)",sidebar_position:3},i="Crear un Activo Digital LSP7 (Token)",c={unversionedId:"es/guides/digital-assets/transfer-lsp7-digital-asset",id:"es/guides/digital-assets/transfer-lsp7-digital-asset",title:"Crear un Activo Digital LSP7 (Token)",description:"Esta gu\xeda te ense\xf1ar\xe1 c\xf3mo transferir un Activo Digital LSP7 existente desde un Perfil Universal controlado por un Gestor de Claves hacia otro Perfil Universal.",source:"@site/docs/es/guides/digital-assets/transfer-lsp7-digital-asset.md",sourceDirName:"es/guides/digital-assets",slug:"/es/guides/digital-assets/transfer-lsp7-digital-asset",permalink:"/lukso-es/es/guides/digital-assets/transfer-lsp7-digital-asset",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/digital-assets/transfer-lsp7-digital-asset.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"3 abr 2023",sidebarPosition:3,frontMatter:{sidebar_label:"Transferir un Activo Digital LSP7 (Token)",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Acu\xf1ar un Activo Digital LSP7 (Token)",permalink:"/lukso-es/es/guides/digital-assets/mint-lsp7-digital-asset"},next:{title:"Leer Datos de Activos",permalink:"/lukso-es/es/guides/digital-assets/read-asset-data"}},u={},d=[{value:"Transferir tokens a otro Perfil Universal",id:"transferir-tokens-a-otro-perfil-universal",level:2},{value:"Paso 1 - Configurar importaciones y constantes",id:"paso-1---configurar-importaciones-y-constantes",level:3},{value:"Paso 2 - Instanciar contratos",id:"paso-2---instanciar-contratos",level:3},{value:"Paso 3 - Preparar los calldatas",id:"paso-3---preparar-los-calldatas",level:3},{value:"Paso 4 - Enviar transacci\xf3n",id:"paso-4---enviar-transacci\xf3n",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final",level:3}],p={toc:d};function m(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"crear-un-activo-digital-lsp7-token"},"Crear un Activo Digital LSP7 (Token)"),(0,r.kt)("p",null,"Esta gu\xeda te ense\xf1ar\xe1 c\xf3mo transferir un ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/nft-2.0/LSP7-Digital-Asset"},"Activo Digital LSP7")," existente desde un ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp0-erc725account"},"Perfil Universal")," controlado por un ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager"},"Gestor de Claves")," hacia otro Perfil Universal."),(0,r.kt)("h2",{id:"transferir-tokens-a-otro-perfil-universal"},"Transferir tokens a otro Perfil Universal"),(0,r.kt)("p",null,"El siguiente fragmento de c\xf3digo muestra c\xf3mo transferir 15 tokens desde tu Perfil Universal hacia otro Perfil Universal."),(0,r.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"O bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," o bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h3",{id:"paso-1---configurar-importaciones-y-constantes"},"Paso 1 - Configurar importaciones y constantes"),(0,r.kt)("p",null,"En este punto necesitar\xe1s una clave privada para poder transferir algunos tokens, as\xed como la ",(0,r.kt)("em",{parentName:"p"},"direcci\xf3n del contrato de token")," de ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP7Mintable")," y la ",(0,r.kt)("em",{parentName:"p"},"direcci\xf3n del Perfil Universal")," que tiene algunos tokens.\nImportaremos ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP7Mintable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UniversalProfile"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyManager")," para obtener los ",(0,r.kt)("em",{parentName:"p"},"ABIs")," de los contratos con los que interactuaremos."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// configura tu EOA\nconst account = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// configura tu EOA\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h3",{id:"paso-2---instanciar-contratos"},"Paso 2 - Instanciar contratos"),(0,r.kt)("p",null,"En este punto, los contratos ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP7Mintable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UniversalProfile"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyManager")," est\xe1n siendo preparados para las siguientes interacciones. Construye una instancia de un contrato, utilizando ",(0,r.kt)("em",{parentName:"p"},"contract ABI")," y ",(0,r.kt)("em",{parentName:"p"},"contract address"),"."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const myUniversalProfile = new web3.eth.Contract(UniversalProfile.abi, myUniversalProfileAddress);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst myToken = new web3.eth.Contract(LSP7Mintable.abi, myTokenAddress);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const myUniversalProfile = new ethers.Contract(myUniversalProfileAddress, UniversalProfile.abi);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new ethers.Contract(owner, KeyManager.abi);\n\nconst myToken = new ethers.Contract(myTokenAddress, LSP7Mintable.abi);\n")))),(0,r.kt)("h3",{id:"paso-3---preparar-los-calldatas"},"Paso 3 - Preparar los calldatas"),(0,r.kt)("p",null,"Ahora necesitamos preparar los calldatas que utilizaremos para transferir tokens de un Perfil Universal a otro. El primer calldata es una transferencia de tokens. El segundo calldata es una interacci\xf3n del Perfil Universal con el contrato de tokens."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 1. generar los calldata para transferir los tokens\nconst tokenCalldata = myToken.methods\n  .transfer(myUniversalProfileAddress, '<receiver-up-address>', 15, false, '0x')\n  .encodeABI();\n\n// 2. generar calldata para que Universal Profile ejecute la transferencia de tokens en el contrato de tokens\nconst upCalldata = myUniversalProfile.methods['execute(uint256,address,uint256,bytes)'](\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX enviados\n  tokenCalldata,\n).encodeABI();\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 1. generar los calldata para transferir los tokens\nconst tokenCalldata = myToken.interface.encodeFunctionData('transfer', [\n  myUniversalProfileAddress,\n  '<receiver-up-address>',\n  15,\n  false,\n  '0x',\n]);\n\n// 2. generar calldata para que Universal Profile ejecute la transferencia de tokens en el contrato de tokens\nconst upCalldata = myUniversalProfile.interface.encodeFunctionData('execute', [\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX enviados\n  tokenCalldata,\n]);\n")))),(0,r.kt)("h3",{id:"paso-4---enviar-transacci\xf3n"},"Paso 4 - Enviar transacci\xf3n"),(0,r.kt)("p",null,"Por \xfaltimo, enviamos la transacci\xf3n y transferimos los tokens de un Perfil Universal a otro."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 3. ejecutar a trav\xe9s del KeyManager\nawait myKeyManager.methods['execute(bytes)'](upCalldata).send({\n  from: myEOA,\n  gas: 5_000_000,\n  gasPrice: '1000000000',\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// 3. ejecutar a trav\xe9s del KeyManager\nawait myKeyManager.connect(myEOA)['execute(bytes)'](upCalldata);\n")))),(0,r.kt)("h3",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// configura tu EOA\nconst account = web3.eth.accounts.wallet.add(privateKey);\n\nconst myUniversalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  myUniversalProfileAddress,\n);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst myToken = new web3.eth.Contract(LSP7Mintable.abi, myTokenAddress);\n\n// 1. generar los calldata para transferir los tokens\nconst tokenCalldata = myToken.methods\n  .transfer(myUniversalProfileAddress, '<receiver-up-address>', 15, false, '0x')\n  .encodeABI();\n\n// 2. generar calldata para que Universal Profile ejecute la transferencia de tokens en el contrato de tokens\nconst upCalldata = myUniversalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX enviados\n  tokenCalldata,\n).encodeABI();\n\n// 3. ejecutar a trav\xe9s del KeyManager\nawait myKeyManager.methods['execute(bytes)'](upCalldata).send({\n  from: myEOA,\n  gas: 5_000_000,\n  gasPrice: '1000000000',\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import LSP7Mintable from '@lukso/lsp-smart-contracts/artifacts/LSP7Mintable.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst privateKey = '0x...';\nconst myUniversalProfileAddress = '0x...';\nconst myTokenAddress = '0x...';\n\n// configura tu EOA\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\nconst myUniversalProfile = new ethers.Contract(\n  myUniversalProfileAddress,\n  UniversalProfile.abi,\n);\n\nconst owner = await myUniversalProfile.methods.owner();\nconst myKeyManager = new ethers.Contract(owner, KeyManager.abi);\n\nconst myToken = new ethers.Contract(myTokenAddress, LSP7Mintable.abi);\n\n// 1. generar los calldata para transferir los tokens\nconst tokenCalldata = myToken.interface.encodeFunctionData('transfer', [\n  myUniversalProfileAddress,\n  '<receiver-up-address>',\n  15,\n  false,\n  '0x',\n]);\n\n// 2. generar calldata para que Universal Profile ejecute la transferencia de tokens en el contrato de tokens\nconst upCalldata = myUniversalProfile.interface.encodeFunctionData('execute', [\n  0, // operation 0 CALL\n  myToken._address,\n  0, // 0  LYX enviados\n  tokenCalldata,\n]);\n\n// 3. ejecutar a trav\xe9s del KeyManager\nawait myKeyManager.connect(myEOA)['execute(bytes)'](upCalldata);\n")))))}m.isMDXComponent=!0}}]);