"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[7061],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>m});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),c=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=c(e.components);return n.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||l;return t?n.createElement(f,o(o({ref:a},d),{},{components:t})):n.createElement(f,o({ref:a},d))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=p;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>o});var n=t(7294),r=t(6010);const l="tabItem_Ymn6";function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>w});var n=t(7462),r=t(7294),l=t(6010),o=t(2466),s=t(6775),i=t(1980),c=t(7392),d=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function p(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function f(e){let{queryString:a=!1,groupId:t}=e;const n=(0,s.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i._X)(l),(0,r.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(n.location.search);a.set(l,e),n.replace({...n.location,search:a.toString()})}),[l,n])]}function g(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,l=p(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:l}))),[i,c]=f({queryString:t,groupId:n}),[u,g]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,l]=(0,d.Nk)(t);return[n,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:n}),v=(()=>{const e=i??u;return m({value:e,tabValues:l})?e:null})();(0,r.useEffect)((()=>{v&&s(v)}),[v]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),g(e)}),[c,g,l]),tabValues:l}}var v=t(2389);const k="tabList__CuJ",b="tabItem_LNqP";function C(e){let{className:a,block:t,selectedValue:s,selectValue:i,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),p=e=>{const a=e.currentTarget,t=d.indexOf(a),n=c[t].value;n!==s&&(u(a),i(n))},m=e=>{var a;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}null==(a=t)||a.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>d.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.Z)("tabs__item",b,null==o?void 0:o.className,{"tabs__item--active":s===a})}),t??a)})))}function h(e){let{lazy:a,children:t,selectedValue:n}=e;if(a){const e=t.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function y(e){const a=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k)},r.createElement(C,(0,n.Z)({},e,a)),r.createElement(h,(0,n.Z)({},e,a)))}function w(e){const a=(0,v.Z)();return r.createElement(y,(0,n.Z)({key:String(a)},e))}},6036:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=t(7462),r=(t(7294),t(3905)),l=t(4866),o=t(5162);const s={sidebar_label:"Interactuar con Contratos",sidebar_position:5},i="Interactuar con otros contratos",c={unversionedId:"es/guides/universal-profile/interact-with-contracts",id:"es/guides/universal-profile/interact-with-contracts",title:"Interactuar con otros contratos",description:"En esta gu\xeda aprenderemos a utilizar nuestro Perfil Universal para interactuar con cualquier otro contrato inteligente (como si utiliz\xe1ramos una Cuenta de Propiedad Externa normal).",source:"@site/docs/es/guides/universal-profile/interact-with-contracts.md",sourceDirName:"es/guides/universal-profile",slug:"/es/guides/universal-profile/interact-with-contracts",permalink:"/lukso-es/es/guides/universal-profile/interact-with-contracts",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/universal-profile/interact-with-contracts.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"3 abr 2023",sidebarPosition:5,frontMatter:{sidebar_label:"Interactuar con Contratos",sidebar_position:5},sidebar:"guidesSidebar",previous:{title:"Transferir LYX",permalink:"/lukso-es/es/guides/universal-profile/transfer-lyx"},next:{title:"Comprobar si una direcci\xf3n es un UP",permalink:"/lukso-es/es/guides/universal-profile/check-if-address-is-universal-profile"}},d={},u=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Configuraci\xf3n",id:"configuraci\xf3n",level:2},{value:"Paso 1 - Crear las instancias de los contratos",id:"paso-1---crear-las-instancias-de-los-contratos",level:2},{value:"Paso 2 - Cifrar los calldata",id:"paso-2---cifrar-los-calldata",level:2},{value:"Cifrar calldata del Contrato Destino",id:"cifrar-calldata-del-contrato-destino",level:3},{value:"Cifrar calldata de Perfil Universal",id:"cifrar-calldata-de-perfil-universal",level:3},{value:"Paso 3 - Ejecutar a trav\xe9s del Gestor de Claves",id:"paso-3---ejecutar-a-trav\xe9s-del-gestor-de-claves",level:2},{value:"Cargar la EOA",id:"cargar-la-eoa",level:3},{value:"Enviar la ejecuci\xf3n de calldata",id:"enviar-la-ejecuci\xf3n-de-calldata",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final",level:2}],p={toc:u};function m(e){let{components:a,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interactuar-con-otros-contratos"},"Interactuar con otros contratos"),(0,r.kt)("p",null,"En esta gu\xeda aprenderemos a utilizar nuestro Perfil Universal para interactuar con cualquier otro contrato inteligente (como si utiliz\xe1ramos una Cuenta de Propiedad Externa normal)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Flujo de interacci\xf3n"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Gu\xeda - Interactuar con otros contratos usando un Perfil Universal",src:t(5157).Z,width:"8408",height:"2432"})),(0,r.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,r.kt)("p",null,"Hemos visto en el ejemplo anterior como enviar LYX desde nuestro UP a trav\xe9s de la funci\xf3n ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/smart-contracts/lsp0-erc725-account#execute"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(...)")),"."),(0,r.kt)("p",null,"Esta funci\xf3n ofrece un cuarto par\xe1metro: ",(0,r.kt)("inlineCode",{parentName:"p"},"_data"),", que proporciona mucha flexibilidad a la hora de interactuar desde nuestro UP. El par\xe1metro ",(0,r.kt)("inlineCode",{parentName:"p"},"_data")," es \xfatil cuando el destinatario ",(0,r.kt)("inlineCode",{parentName:"p"},"_to")," es un contrato inteligente."),(0,r.kt)("p",null,"Si quieres llamar a un contrato inteligente espec\xedfico que fue desplegado en la red por el Perfil Universal, los par\xe1metros de la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"execute(...)")," ser\xe1n los siguientes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_operation"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (para ",(0,r.kt)("inlineCode",{parentName:"li"},"CALL"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_to"),": la ",(0,r.kt)("inlineCode",{parentName:"li"},"direcci\xf3n")," del contrato inteligente con el que queremos interactuar."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_value_"),": vac\xedo (0)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_data"),": el nombre de la funci\xf3n cifrada ABI y los argumentos, que se ejecutar\xe1n en la direcci\xf3n del contrato ",(0,r.kt)("inlineCode",{parentName:"li"},"_to"),".")),(0,r.kt)("p",null,"Supongamos que un contrato inteligente ",(0,r.kt)("inlineCode",{parentName:"p"},"targetContract")," fue desplegado en la red y queremos que nuestra UP llame a la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"myCoolFunction")," en este contrato. Tendremos que"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-encodeabi"},"cifrar-ABI")," la llamada a la funci\xf3n con los par\xe1metros que queramos pasar."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("ol",{parentName:"li",start:2},(0,r.kt)("li",{parentName:"ol"},"Pasar el calldata codificado como argumento ",(0,r.kt)("inlineCode",{parentName:"li"},"_data")," de la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"li"},"execute(...)"),".")))),(0,r.kt)("h2",{id:"configuraci\xf3n"},"Configuraci\xf3n"),(0,r.kt)("p",null,"Para completar esta gu\xeda, necesitaremos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"una EOA con algunos LYX para las cuotas de gas y los ","[permisos]"," necesarios(../../standards/universal-profile/lsp6-key-manager.md#permissions) para la interacci\xf3n."),(0,r.kt)("li",{parentName:"ul"},"los contratos ABI ",(0,r.kt)("inlineCode",{parentName:"li"},"UniversalProfile")," y ",(0,r.kt)("inlineCode",{parentName:"li"},"KeyManager")," del paquete npm ",(0,r.kt)("a",{parentName:"li",href:"/lukso-es/es/tools/lsp-smart-contracts/getting-started"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")),"."),(0,r.kt)("li",{parentName:"ul"},"la direcci\xf3n de nuestro Perfil Universal."),(0,r.kt)("li",{parentName:"ul"},"la ABI ",(0,r.kt)("inlineCode",{parentName:"li"},"targetContract"),"."),(0,r.kt)("li",{parentName:"ul"},"la direcci\xf3n del Contrato Destino.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"La EOA elegida necesita tener ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"CALL Permission"))," junto con ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#allowed-calls"},(0,r.kt)("strong",{parentName:"a"},"Allowed Calls"))," o ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,r.kt)("strong",{parentName:"a"},"SUPER_CALL Permission")))),(0,r.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias antes de empezar este tutorial:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"O bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," o bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h2",{id:"paso-1---crear-las-instancias-de-los-contratos"},"Paso 1 - Crear las instancias de los contratos"),(0,r.kt)("p",null,"El primer paso es crear instancias de nuestros contratos de Perfil Universal, Gestor de Claves y el Contrato de Destino."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Crea una instancia de contrato de Perfil Universal a partir de ",(0,r.kt)("inlineCode",{parentName:"li"},"universalProfileAddress"),"."),(0,r.kt)("li",{parentName:"ul"},"Obt\xe9n el ",(0,r.kt)("inlineCode",{parentName:"li"},"owner()")," del Perfil Universal."),(0,r.kt)("li",{parentName:"ul"},"Crea una instancia de contrato Gestor de Claves a partir del propietario del Perfil Universal."),(0,r.kt)("li",{parentName:"ul"},'Crea una instancia de contrato de destino a partir de "targetContractAddress".')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Guarda el ABI del Contrato de Destino en un JSON separado e imp\xf3rtalo en el archivo principal.",(0,r.kt)("br",{parentName:"p"}),"\n","Puedes compilar r\xe1pidamente y obtener el ABI de un contrato en ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix IDE"),".")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones y Constantes"',title:'"Importaciones',y:!0,'Constantes"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport Web3 from 'web3';\n\nimport TargetContractABI from './TargetContractABI.json';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// el Gestor de Claves es el propietario del Perfil Universal\n// por lo que podemos llamar a la funci\xf3n owner() para obtener la direcci\xf3n del Gestor de Claves\nconst owner = await universalProfile.methods.owner().call();\nconst keyManager = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new web3.eth.Contract(\n  TargetContractABI,\n  targetContractAddress,\n);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones y Constantes"',title:'"Importaciones',y:!0,'Constantes"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ethers } from 'ethers';\n\nimport TargetContractABI from './TargetContractABI.json';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n  provider,\n);\n\n// el Gestor de Claves es el propietario del Perfil Universal\n// por lo que podemos llamar a la funci\xf3n owner() para obtener la direcci\xf3n del Gestor de Claves\nconst owner = await universalProfile.owner();\nconst keyManager = new ethers.Contract(owner, KeyManager.abi, provider);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new ethers.Contract(\n  targetContractAddress,\n  TargetContractABI,\n  provider,\n);\n")))),(0,r.kt)("h2",{id:"paso-2---cifrar-los-calldata"},"Paso 2 - Cifrar los calldata"),(0,r.kt)("p",null,"Esta es la parte f\xe1cil, necesitamos crear 2 calldata:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"El ",(0,r.kt)("em",{parentName:"li"},"primer calldata")," se ejecutar\xe1 en el Contrato de destino."),(0,r.kt)("li",{parentName:"ul"},"El ",(0,r.kt)("em",{parentName:"li"},"segundo calldata")," se ejecutar\xe1 en el Perfil Universal y activar\xe1 el ",(0,r.kt)("em",{parentName:"li"},"primer calldata"),".")),(0,r.kt)("h3",{id:"cifrar-calldata-del-contrato-destino"},"Cifrar calldata del Contrato Destino"),(0,r.kt)("p",null,"Cifrar los calldata que se ejecutar\xe1n en el Contrato Destino."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="calldata de Destino"',title:'"calldata',de:!0,'Destino"':!0},"// 1. cifrar los calldata a ejecutar en el targetContract\n// asumiendo que targetContract es una instancia de Contract\nconst targetCalldata = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="calldata de Destino"',title:'"calldata',de:!0,'Destino"':!0},"// 1. cifrar los calldata a ejecutar en el targetContract\n// asumiendo que targetContract es una instancia de Contract\nconst targetCalldata = targetContract.interface.encodeFunctionData(\n  'myCoolfunction',\n  ['dummyParameter'],\n);\n")))),(0,r.kt)("h3",{id:"cifrar-calldata-de-perfil-universal"},"Cifrar calldata de Perfil Universal"),(0,r.kt)("p",null,"Cifrar el calldata que se ejecutar\xe1 en el Perfil Universal. Estos calldata tambi\xe9n activar\xe1n los calldata que se ejecutar\xe1n en el Contrato Destino."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="calldata del Perfil Universal"',title:'"calldata',del:!0,Perfil:!0,'Universal"':!0},"const OPERATION_CALL = 0;\n\n// 2. cifrar los calldata a ejecutar en el UP,\n// pasando los calldata a ejecutar en el targetContract como 4\xba par\xe1metro\nconst abiCalldata = await universalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](OPERATION_CALL, targetContract.address, 0, targetCalldata).encodeABI();\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="calldata del Perfil Universal"',title:'"calldata',del:!0,Perfil:!0,'Universal"':!0},"const OPERATION_CALL = 0;\n\n// 2. cifrar los calldata a ejecutar en el UP,\n// pasando los calldata a ejecutar en el targetContract como 4\xba par\xe1metro\nconst abiCalldata = universalProfile.interface.encodeFunctionData('execute', [\n  OPERATION_CALL,\n  targetContract.address,\n  0,\n  targetCalldata,\n]);\n")))),(0,r.kt)("h2",{id:"paso-3---ejecutar-a-trav\xe9s-del-gestor-de-claves"},"Paso 3 - Ejecutar a trav\xe9s del Gestor de Claves"),(0,r.kt)("h3",{id:"cargar-la-eoa"},"Cargar la EOA"),(0,r.kt)("p",null,"Como en otras gu\xedas, un paso importante es cargar nuestra EOA que es un controlador para nuestro Perfil Universal. En este caso la direcci\xf3n del controlador debe tener ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#permissions"},(0,r.kt)("strong",{parentName:"a"},"CALL Permission"))," junto con ","[",(0,r.kt)("strong",{parentName:"p"},"Allowed Calls"),"]","(../.. /standards/universal-profile/lsp6-key-manager.md#allowed-calls) o ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,r.kt)("strong",{parentName:"a"},"SUPER_CALL Permission"))," para que la transacci\xf3n se realice correctamente."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Configura la EOA"',title:'"Configura',la:!0,'EOA"':!0},"const PRIVATE_KEY = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Configura la EOA"',title:'"Configura',la:!0,'EOA"':!0},"const PRIVATE_KEY = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = new ethers.Wallet(PRIVATE_KEY).connect(provider);\n")))),(0,r.kt)("h3",{id:"enviar-la-ejecuci\xf3n-de-calldata"},"Enviar la ejecuci\xf3n de calldata"),(0,r.kt)("p",null,"El paso final es pasar los calldata cifrados al Gestor de Claves. Como estamos llamando desde la direcci\xf3n de un controlador de UP (con los ","[",(0,r.kt)("strong",{parentName:"p"},"permisos"),"]"," adecuados(../../standards/universal-profile/lsp6-key-manager.md#permissions)), el Gestor de Claves autorizar\xe1 y ejecutar\xe1 la transacci\xf3n."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar transacci\xf3n"',title:'"Enviar','transacci\xf3n"':!0},"// 3. ejecutar a trav\xe9s del KeyManager, pasando el calldata del UP\nawait keyManager.methods['execute(bytes)'](abiCalldata).send({\n  from: EOA.address,\n  gasLimit: 300_000,\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar transacci\xf3n"',title:'"Enviar','transacci\xf3n"':!0},"// 3. ejecutar a trav\xe9s del KeyManager, pasando el calldata del UP\nawait keyManager.connect(EOA)['execute(bytes)'](abiCalldata);\n")))),(0,r.kt)("h2",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="C\xf3digo final"',title:'"C\xf3digo','final"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// el Gestor de Claves es el propietario del Perfil Universal\n// por lo que podemos llamar a la funci\xf3n owner() para obtener la direcci\xf3n del Gestor de Claves\nconst owner = await universalProfile.methods.owner().call();\nconst keyManager = new web3.eth.Contract(KeyManager.abi, owner);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new web3.eth.Contract(\n  TargetContractABI,\n  targetContractAddress,\n);\n\n// 1. cifrar los calldata a ejecutar en el targetContract\n// asumiendo que targetContract es una instancia de Contract\nconst targetCalldata = targetContract.methods\n  .myCoolfunction('dummyParameter')\n  .encodeABI();\n\nconst OPERATION_CALL = 0;\n\n//2. cifrar los calldata a ejecutar en el UP,\n// pasando los calldata a ejecutar en el targetContract como 4\xba par\xe1metro\nlet abiCalldata = await universalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](OPERATION_CALL, targetContract.address, 0, targetCalldata).encodeABI();\n\nconst PRIVATE_KEY = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = web3.eth.accounts.wallet.add(PRIVATE_KEY);\n\n// 3. ejecutar a trav\xe9s del KeyManager, pasando el calldata del UP\nawait keyManager.methods['execute(bytes)'](abiCalldata).send({\n  from: EOA.address,\n  gasLimit: 300_000,\n});\n"))),(0,r.kt)(o.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="C\xf3digo final"',title:'"C\xf3digo','final"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport TargetContractABI from './TargetContractABI.json';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\n\nconst universalProfileAddress = '0x...';\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n  provider,\n);\n\n// el Gestor de Claves es el propietario del Perfil Universal\n// por lo que podemos llamar a la funci\xf3n owner() para obtener la direcci\xf3n del Gestor de Claves\nconst owner = await universalProfile.owner();\nconst keyManager = new ethers.Contract(owner, KeyManager.abi, provider);\n\nconst targetContractAddress = '0x...';\nconst targetContract = new ethers.Contract(\n  targetContractAddress,\n  TargetContractABI,\n  provider,\n);\n\n// 1. cifrar los calldata a ejecutar en el targetContract\n// asumiendo que targetContract es una instancia de Contract\nconst targetCalldata = targetContract.interface.encodeFunctionData(\n  'myCoolfunction',\n  ['dummyParameter'],\n);\n\nconst OPERATION_CALL = 0;\n\n// 2. cifrar los calldata a ejecutar en el UP,\n// pasando los calldata a ejecutar en el targetContract como 4\xba par\xe1metro\nlet abiCalldata = universalProfile.interface.encodeFunctionData('execute', [\n  OPERATION_CALL,\n  targetContract.address,\n  0,\n  targetCalldata,\n]);\n\nconst PRIVATE_KEY = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = new ethers.Wallet(PRIVATE_KEY).connect(provider);\n\n// 3. ejecutar a trav\xe9s del KeyManager, pasando el calldata del UP\nawait keyManager.connect(EOA)['execute(bytes)'](abiCalldata);\n")))))}m.isMDXComponent=!0},5157:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/interact-with-contracts-using-universal-profile-flow-89e9ee2a1bfb092672fd062750363583.jpg"}}]);