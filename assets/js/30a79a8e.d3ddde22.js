"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[5282],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>m});var r=t(7294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,s=function(e,a){if(null==e)return{};var t,r,s={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=r.createContext({}),c=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},d=function(e){var a=c(e.components);return r.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var t=e.components,s=e.mdxType,n=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=s,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||n;return t?r.createElement(f,l(l({ref:a},d),{},{components:t})):r.createElement(f,l({ref:a},d))}));function m(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var n=t.length,l=new Array(n);l[0]=p;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var c=2;c<n;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>l});var r=t(7294),s=t(6010);const n="tabItem_Ymn6";function l(e){let{children:a,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.Z)(n,l),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>w});var r=t(7462),s=t(7294),n=t(6010),l=t(2466),o=t(6775),i=t(1980),c=t(7392),d=t(12);function u(e){return function(e){return s.Children.map(e,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:s}}=e;return{value:a,label:t,attributes:r,default:s}}))}function p(e){const{values:a,children:t}=e;return(0,s.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function f(e){let{queryString:a=!1,groupId:t}=e;const r=(0,o.k6)(),n=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i._X)(n),(0,s.useCallback)((e=>{if(!n)return;const a=new URLSearchParams(r.location.search);a.set(n,e),r.replace({...r.location,search:a.toString()})}),[n,r])]}function v(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,n=p(e),[l,o]=(0,s.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:n}))),[i,c]=f({queryString:t,groupId:r}),[u,v]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,n]=(0,d.Nk)(t);return[r,(0,s.useCallback)((e=>{t&&n.set(e)}),[t,n])]}({groupId:r}),y=(()=>{const e=i??u;return m({value:e,tabValues:n})?e:null})();(0,s.useEffect)((()=>{y&&o(y)}),[y]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),v(e)}),[c,v,n]),tabValues:n}}var y=t(2389);const b="tabList__CuJ",g="tabItem_LNqP";function k(e){let{className:a,block:t,selectedValue:o,selectValue:i,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),p=e=>{const a=e.currentTarget,t=d.indexOf(a),r=c[t].value;r!==o&&(u(a),i(r))},m=e=>{var a;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}null==(a=t)||a.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:l}=e;return s.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===a?0:-1,"aria-selected":o===a,key:a,ref:e=>d.push(e),onKeyDown:m,onClick:p},l,{className:(0,n.Z)("tabs__item",g,null==l?void 0:l.className,{"tabs__item--active":o===a})}),t??a)})))}function h(e){let{lazy:a,children:t,selectedValue:r}=e;if(a){const e=t.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},t.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function C(e){const a=v(e);return s.createElement("div",{className:(0,n.Z)("tabs-container",b)},s.createElement(k,(0,r.Z)({},e,a)),s.createElement(h,(0,r.Z)({},e,a)))}function w(e){const a=(0,y.Z)();return s.createElement(C,(0,r.Z)({key:String(a)},e))}},3209:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=t(7462),s=(t(7294),t(3905)),n=t(4866),l=t(5162);const o={sidebar_label:"Restringir las Direcciones a las B\xf3vedas",sidebar_position:4},i="Restringir las Direcciones a las B\xf3vedas",c={unversionedId:"es/guides/vault/restrict-addresses-to-vaults",id:"es/guides/vault/restrict-addresses-to-vaults",title:"Restringir las Direcciones a las B\xf3vedas",description:"Como se menciona en la primera gu\xeda sobre el Vault, el Vault se puede utilizar para restringir diferentes direcciones (protocolos, otros dispositivos, etc..) a que ejecuten y establezcan datos en \xe9l en lugar de hacerlo directamente en el Perfil Universal.",source:"@site/docs/es/guides/vault/restrict-addresses-to-vaults.md",sourceDirName:"es/guides/vault",slug:"/es/guides/vault/restrict-addresses-to-vaults",permalink:"/lukso-es/es/guides/vault/restrict-addresses-to-vaults",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/vault/restrict-addresses-to-vaults.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"3 abr 2023",sidebarPosition:4,frontMatter:{sidebar_label:"Restringir las Direcciones a las B\xf3vedas",sidebar_position:4},sidebar:"guidesSidebar",previous:{title:"Interactuar con Contratos",permalink:"/lukso-es/es/guides/vault/interact-with-contracts"},next:{title:"Crear un Perfil Universal",permalink:"/lukso-es/es/guides/universal-profile/create-profile"}},d={},u=[{value:"Conceder Permisos a Terceros",id:"conceder-permisos-a-terceros",level:2},{value:"Utilizar el permiso AllowedAddresses para Terceras Partes",id:"utilizar-el-permiso-allowedaddresses-para-terceras-partes",level:2},{value:"Configuraci\xf3n",id:"configuraci\xf3n",level:2},{value:"Paso 1 - Importaciones, Constantes y EOA",id:"paso-1---importaciones-constantes-y-eoa",level:2},{value:"Paso 2 - Crear instancias de contrato",id:"paso-2---crear-instancias-de-contrato",level:2},{value:"Paso 3 - Cifrar los calldata para cifrar <code>AllowedCalls</code>",id:"paso-3---cifrar-los-calldata-para-cifrar-allowedcalls",level:2},{value:"Paso 4 - Ejecutar a trav\xe9s del Gestor de Claves",id:"paso-4---ejecutar-a-trav\xe9s-del-gestor-de-claves",level:2},{value:"C\xf3digo final",id:"c\xf3digo-final",level:2}],p={toc:u};function m(e){let{components:a,...o}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,o,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"restringir-las-direcciones-a-las-b\xf3vedas"},"Restringir las Direcciones a las B\xf3vedas"),(0,s.kt)("p",null,"Como se menciona en la ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/es/guides/vault/create-a-vault"},"primera gu\xeda sobre el Vault"),", el ",(0,s.kt)("strong",{parentName:"p"},"Vault")," se puede utilizar para restringir diferentes direcciones (protocolos, otros dispositivos, etc..) a que ejecuten y establezcan datos en \xe9l en lugar de hacerlo directamente en el Perfil Universal. "),(0,s.kt)("p",null,"De esta forma, al ",(0,s.kt)("strong",{parentName:"p"},"otorgar permisos a un tercero")," de ejecuci\xf3n a trav\xe9s de tu perfil, este tercero s\xf3lo podr\xe1 interactuar con la B\xf3veda, y todos los dem\xe1s activos estar\xe1n a salvo."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Gu\xeda - Restringir direcciones a un LSP9Vault",src:t(7879).Z,width:"2762",height:"1448"})),(0,s.kt)("h2",{id:"conceder-permisos-a-terceros"},"Conceder Permisos a Terceros"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Aseg\xfarate de no conceder a la direcci\xf3n de terceros los ",(0,s.kt)("strong",{parentName:"p"},"SUPER Permissions"),". De lo contrario, ",(0,s.kt)("strong",{parentName:"p"},"la restricci\xf3n AllowedAddresses")," no funcionar\xe1.")),(0,s.kt)("p",null,"Consulta la gu\xeda de ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/es/guides/key-manager/give-permissions"},"concesi\xf3n de permisos a terceros")),", y aseg\xfarate de conceder a la direcci\xf3n del tercero el ",(0,s.kt)("strong",{parentName:"p"},"Permiso de LLAMADA (Call Permission)"),"."),(0,s.kt)("h2",{id:"utilizar-el-permiso-allowedaddresses-para-terceras-partes"},"Utilizar el permiso AllowedAddresses para Terceras Partes"),(0,s.kt)("p",null,"En este paso, despu\xe9s de conceder a la 3\xaa parte el permiso ",(0,s.kt)("strong",{parentName:"p"},"LLAMAR"),", necesitaremos ",(0,s.kt)("strong",{parentName:"p"},"restringir la direcci\xf3n de la 3\xaa parte")," para que s\xf3lo interact\xfae con la ",(0,s.kt)("strong",{parentName:"p"},"direcci\xf3n de la B\xf3veda"),". Utilizaremos el permiso ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#allowed-calls"},"AllowedCalls permission")," del Key Manager."),(0,s.kt)("h2",{id:"configuraci\xf3n"},"Configuraci\xf3n"),(0,s.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias antes de empezar este tutorial."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Puedes usar ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,s.kt)("inlineCode",{parentName:"a"},"web3.js"))," o ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,s.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,s.kt)("li",{parentName:"ul"},"DEBES instalar ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,s.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts"))),(0,s.kt)("li",{parentName:"ul"},"DEBER\xcdAS instalar ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ERC725Alliance/erc725.js"},(0,s.kt)("inlineCode",{parentName:"a"},"@erc725/erc725.js")))),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install web3 @lukso/lsp-smart-contracts @erc725/erc725.js\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts @erc725/erc725.js\n")))),(0,s.kt)("h2",{id:"paso-1---importaciones-constantes-y-eoa"},"Paso 1 - Importaciones, Constantes y EOA"),(0,s.kt)("p",null,"Para esta gu\xeda primero necesitaremos e importaremos los ",(0,s.kt)("em",{parentName:"p"},"ABIs")," para los contratos de Perfil Universal y Gestor de Claves. Tambi\xe9n importaremos el ",(0,s.kt)("inlineCode",{parentName:"p"},"ERC725YDataKeys")," para recuperar la clave de datos para el ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#allowed-calls"},"permiso AllowedCalls"),".",(0,s.kt)("br",{parentName:"p"}),"\n","Como constantes necesitaremos almacenar las direcciones para el Perfil Universal, la B\xf3veda y el tercero restringido.",(0,s.kt)("br",{parentName:"p"}),"\n","Por \xfaltimo, necesitaremos una clave privada con los ",(0,s.kt)("em",{parentName:"p"},"permisos")," adecuados, en nuestro caso ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#permissions"},(0,s.kt)("strong",{parentName:"a"},"ADDCONTROLLER permission")),"."),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // direcci\xf3n del UP\nconst vaultAddress = '0x..'; // direcci\xf3n de la B\xf3veda\nconst thirdPartyAddress = '0x..'; // direcci\xf3n del tercero al que desea restringir\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // direcci\xf3n del UP\nconst vaultAddress = '0x..'; // direcci\xf3n de la B\xf3veda\nconst thirdPartyAddress = '0x..'; // direcci\xf3n del tercero al que desea restringir\n\n// configura tu EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,s.kt)("h2",{id:"paso-2---crear-instancias-de-contrato"},"Paso 2 - Crear instancias de contrato"),(0,s.kt)("p",null,"En este punto crearemos instancias para los siguientes contratos:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/lukso-es/es/standards/universal-profile/lsp0-erc725account"},(0,s.kt)("strong",{parentName:"a"},"Perfil Universal"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager"},(0,s.kt)("strong",{parentName:"a"},"Gestor de Claves")))),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de contrato de Perfil Universal y Gestor de Claves"',title:'"Instancias',de:!0,contrato:!0,Perfil:!0,Universal:!0,y:!0,Gestor:!0,'Claves"':!0},"// crear una instancia del UP\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// obtener la direcci\xf3n del Gestor de Claves del UP\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del Gestor de Claves\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de contrato de Perfil Universal y Gestor de Claves"',title:'"Instancias',de:!0,contrato:!0,Perfil:!0,Universal:!0,y:!0,Gestor:!0,'Claves"':!0},"// crear una instancia del UP\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n\n// obtener la direcci\xf3n del Gestor de Claves del UP\nconst keyManagerAddress = await universalProfile.owner();\n// crear una instancia del Gestor de Claves\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n")))),(0,s.kt)("h2",{id:"paso-3---cifrar-los-calldata-para-cifrar-allowedcalls"},"Paso 3 - Cifrar los calldata para cifrar ",(0,s.kt)("a",{parentName:"h2",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#allowed-calls"},(0,s.kt)("inlineCode",{parentName:"a"},"AllowedCalls"))),(0,s.kt)("p",null,"Ahora tenemos que cifrar las ",(0,s.kt)("strong",{parentName:"p"},"Llamadas Permitidas")," que queremos para la ",(0,s.kt)("em",{parentName:"p"},"Direcci\xf3n de Terceros"),". Una vez hecho esto, cifraremos un calldata que actualizar\xe1 la clave de datos ",(0,s.kt)("em",{parentName:"p"},"Allowed Calls")," con las ",(0,s.kt)("strong",{parentName:"p"},"Allowed Calls")," cifradas."),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata que actualizar\xe1 las Llamadas Permitidas de una direcci\xf3n de Controlador"',title:'"Calldata',que:!0,"actualizar\xe1":!0,las:!0,Llamadas:!0,Permitidas:!0,de:!0,una:!0,"direcci\xf3n":!0,'Controlador"':!0},"const allowedCallsDataKey = // construcci\xf3n de la clave de datos de las direcciones permitidas\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // de la tercera parte\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// cifrar setData calldata en el UP\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32,bytes)'\n](allowedCallsDataKey, allowedCallsDataValue).encodeABI();\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata que actualizar\xe1 las Llamadas Permitidas de una direcci\xf3n de Controlador"',title:'"Calldata',que:!0,"actualizar\xe1":!0,las:!0,Llamadas:!0,Permitidas:!0,de:!0,una:!0,"direcci\xf3n":!0,'Controlador"':!0},"const allowedCallsDataKey = // construcci\xf3n de la clave de datos de las direcciones permitidas\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // de la tercera parte\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// cifrar setData calldata en el UP\nconst setDataCalldata = universalProfile.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [allowedCallsDataKey, allowedCallsDataValue],\n);\n")))),(0,s.kt)("h2",{id:"paso-4---ejecutar-a-trav\xe9s-del-gestor-de-claves"},"Paso 4 - Ejecutar a trav\xe9s del Gestor de Claves"),(0,s.kt)("p",null,"Finalmente enviaremos una transacci\xf3n que ejecutar\xe1 el calldata ",(0,s.kt)("inlineCode",{parentName:"p"},"setData(...)")," en el Perfil Universal a trav\xe9s del Gestor de Claves."),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar transacci\xf3n a ser ejecutada en el contrato del Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Enviar',"transacci\xf3n":!0,a:!0,ser:!0,ejecutada:!0,en:!0,el:!0,contrato:!0,del:!0,Perfil:!0,Universal:!0,"trav\xe9s":!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el setDataCalldata en el Gestor de Claves\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar transacci\xf3n a ser ejecutada en el contrato del Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Enviar',"transacci\xf3n":!0,a:!0,ser:!0,ejecutada:!0,en:!0,el:!0,contrato:!0,del:!0,Perfil:!0,Universal:!0,"trav\xe9s":!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el setDataCalldata en el Gestor de Claves\nawait myKM.connect(myEOA)['execute(bytes)'](setDataCalldata);\n")))),(0,s.kt)("h2",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,s.kt)(n.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Establecer las Direcciones Permitidas en la direcci\xf3n de terceros"',title:'"Establecer',las:!0,Direcciones:!0,Permitidas:!0,en:!0,la:!0,"direcci\xf3n":!0,de:!0,'terceros"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // direcci\xf3n del UP\nconst vaultAddress = '0x..'; // direcci\xf3n de la B\xf3veda\nconst thirdPartyAddress = '0x..'; // direcci\xf3n del tercero al que desea restringir\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n\n// crear una instancia del UP\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n\n// obtener la direcci\xf3n del Gestor de Claves del UP\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del Gestor de Claves\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n\nconst allowedCallsDataKey = // construcci\xf3n de la clave de datos de las direcciones permitidas\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // de la tercera parte\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// cifrar setData calldata en el UP\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32,bytes)'\n](allowedCallsDataKey, allowedCallsDataValue).encodeABI();\n\n// ejecutar el setDataCalldata en el Gestor de Claves\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Establecer las Direcciones Permitidas en la direcci\xf3n de terceros"',title:'"Establecer',las:!0,Direcciones:!0,Permitidas:!0,en:!0,la:!0,"direcci\xf3n":!0,de:!0,'terceros"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { encodeKey } from '@erc725/erc725.js/build/main/src/lib/utils.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x..'; // direcci\xf3n del UP\nconst vaultAddress = '0x..'; // direcci\xf3n de la B\xf3veda\nconst thirdPartyAddress = '0x..'; // direcci\xf3n del tercero al que desea restringir\n\n// configura tu EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\n// crear una instancia del UP\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n\n// obtener la direcci\xf3n del Gestor de Claves del UP\nconst keyManagerAddress = await universalProfile.owner();\n// crear una instancia del Gestor de Claves\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\nconst allowedCallsDataKey = // construcci\xf3n de la clave de datos de las direcciones permitidas\n  ERC725YDataKeys.LSP6['AddressPermissions:AllowedCalls'] +\n  thirdPartyAddress.substring(2); // de la tercera parte\n\nconst allowedCallsSchema = {\n  name: 'AddressPermissions:AllowedCalls:<address>',\n  key: '0x4b80742de2bf393a64c70000<address>',\n  keyType: 'MappingWithGrouping',\n  valueType: '(bytes4,address,bytes4)[CompactBytesArray]',\n  valueContent: '(Bytes4,Address,Bytes4)',\n};\n\nconst allowedCallsDataValue = encodeKey(allowedCallsSchema, [\n  '0xffffffff',\n  vaultAddress,\n  '0xffffffff',\n]);\n\n// cifrar setData calldata en el UP\nconst setDataCalldata = universalProfile.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [allowedCallsDataKey, allowedCallsDataValue],\n);\n\n// ejecutar el setDataCalldata en el Gestor de Claves\nawait myKM.connect(myEOA)['execute(bytes)'](setDataCalldata);\n")))))}m.isMDXComponent=!0},7879:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/restrict-protocol-to-vault-5430220f8c3675f005ba9acb6bacc12e.jpeg"}}]);