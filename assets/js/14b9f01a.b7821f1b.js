"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[537],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>m});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),c=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(o.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,g=p["".concat(o,".").concat(m)]||p[m]||d[m]||l;return n?t.createElement(g,s(s({ref:a},u),{},{components:n})):t.createElement(g,s({ref:a},u))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=p;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,a,n)=>{n.d(a,{Z:()=>s});var t=n(7294),r=n(6010);const l="tabItem_Ymn6";function s(e){let{children:a,hidden:n,className:s}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},a)}},4866:(e,a,n)=>{n.d(a,{Z:()=>w});var t=n(7462),r=n(7294),l=n(6010),s=n(2466),i=n(6775),o=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:r}}=e;return{value:a,label:n,attributes:t,default:r}}))}function p(e){const{values:a,children:n}=e;return(0,r.useMemo)((()=>{const e=a??d(n);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function m(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function g(e){let{queryString:a=!1,groupId:n}=e;const t=(0,i.k6)(),l=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(t.location.search);a.set(l,e),t.replace({...t.location,search:a.toString()})}),[l,t])]}function k(e){const{defaultValue:a,queryString:n=!1,groupId:t}=e,l=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:l}))),[o,c]=g({queryString:n,groupId:t}),[d,k]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[t,l]=(0,u.Nk)(n);return[t,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:t}),y=(()=>{const e=o??d;return m({value:e,tabValues:l})?e:null})();(0,r.useEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),k(e)}),[c,k,l]),tabValues:l}}var y=n(2389);const f="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:a,block:n,selectedValue:i,selectValue:o,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const a=e.currentTarget,n=u.indexOf(a),t=c[n].value;t!==i&&(d(a),o(t))},m=e=>{var a;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;n=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;n=u[a]??u[u.length-1];break}}null==(a=n)||a.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},a)},c.map((e=>{let{value:a,label:n,attributes:s}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>u.push(e),onKeyDown:m,onClick:p},s,{className:(0,l.Z)("tabs__item",b,null==s?void 0:s.className,{"tabs__item--active":i===a})}),n??a)})))}function h(e){let{lazy:a,children:n,selectedValue:t}=e;if(a){const e=n.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==t}))))}function P(e){const a=k(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",f)},r.createElement(v,(0,t.Z)({},e,a)),r.createElement(h,(0,t.Z)({},e,a)))}function w(e){const a=(0,y.Z)();return r.createElement(P,(0,t.Z)({key:String(a)},e))}},1222:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=n(7462),r=(n(7294),n(3905)),l=n(4866),s=n(5162);const i={sidebar_label:"Ejecutar Transacciones por Retransmisi\xf3n",sidebar_position:3},o="Ejecutar Transacciones por Retransmisi\xf3n",c={unversionedId:"es/guides/key-manager/execute-relay-transactions",id:"es/guides/key-manager/execute-relay-transactions",title:"Ejecutar Transacciones por Retransmisi\xf3n",description:"El est\xe1ndar LSP6 KeyManager permite a cualquiera ejecutar una transacci\xf3n en representaci\xf3n de un perfil universal, siempre que disponga de una transacci\xf3n v\xe1lida que haya sido firmada por una clave que controle el Perfil Universal.",source:"@site/docs/es/guides/key-manager/execute-relay-transactions.md",sourceDirName:"es/guides/key-manager",slug:"/es/guides/key-manager/execute-relay-transactions",permalink:"/lukso-es/es/guides/key-manager/execute-relay-transactions",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/key-manager/execute-relay-transactions.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"3 abr 2023",sidebarPosition:3,frontMatter:{sidebar_label:"Ejecutar Transacciones por Retransmisi\xf3n",sidebar_position:3},sidebar:"guidesSidebar",previous:{title:"Obtener direcciones del controlador",permalink:"/lukso-es/es/guides/key-manager/get-controllers"},next:{title:"Actualizar Gestor de Claves LSP6",permalink:"/lukso-es/es/guides/key-manager/upgrade-lsp6"}},u={},d=[{value:"Generar la carga \xfatil de la transacci\xf3n firmada",id:"generar-la-carga-\xfatil-de-la-transacci\xf3n-firmada",level:2},{value:"Paso 1 - Configurar importaciones y constantes",id:"paso-1---configurar-importaciones-y-constantes",level:3},{value:"Paso 2 - Preparar las instancias de contacto",id:"paso-2---preparar-las-instancias-de-contacto",level:3},{value:"Paso 3 - Obtener nonce de la direcci\xf3n del controlador",id:"paso-3---obtener-nonce-de-la-direcci\xf3n-del-controlador",level:3},{value:"Paso 4 - Cifrar el ABI de una transacci\xf3n",id:"paso-4---cifrar-el-abi-de-una-transacci\xf3n",level:3},{value:"Ejecutar mediante <code>executeRelayCall</code>",id:"ejecutar-mediante-executerelaycall",level:2},{value:"C\xf3digo final",id:"c\xf3digo-final",level:2}],p={toc:d};function m(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ejecutar-transacciones-por-retransmisi\xf3n"},"Ejecutar Transacciones por Retransmisi\xf3n"),(0,r.kt)("p",null,"El est\xe1ndar ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager"},"LSP6 KeyManager")," permite a cualquiera ejecutar una transacci\xf3n en representaci\xf3n de un perfil universal, siempre que disponga de una transacci\xf3n v\xe1lida que haya sido firmada por una clave que controle el Perfil Universal."),(0,r.kt)("p",null,"La ejecuci\xf3n por retransmisi\xf3n permite casos de uso como los Servicios de Retransmisi\xf3n de Transacciones, en los que los usuarios pueden enviar los detalles de sus transacciones a un tercero para que las ejecute, lo que aleja la carga de los costes de gas del usuario propietario del Perfil Universal."),(0,r.kt)("p",null,"Por ejemplo, Alice puede enviar una transacci\xf3n cifrada que actualice la imagen ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp3-universal-profile-metadata"},"LSP3Profile")," de su Perfil Universal a un segundo usuario, Bob, que ejecuta la transacci\xf3n y paga el coste de gas de la transacci\xf3n en representaci\xf3n de Alice."),(0,r.kt)("p",null,"Para ejecutar la transacci\xf3n, Bob necesita saber:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"la ABI cifrada de la transacci\xf3n que se ejecutar\xe1,"),(0,r.kt)("li",{parentName:"ul"},"la firma de la transacci\xf3n,"),(0,r.kt)("li",{parentName:"ul"},"el nonce de la clave que firm\xf3 la transacci\xf3n.")),(0,r.kt)("p",null,"A continuaci\xf3n, la transacci\xf3n se ejecuta a trav\xe9s de la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"executeRelayCall")," del ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager"},"LSP6KeyManager"),"."),(0,r.kt)("h2",{id:"generar-la-carga-\xfatil-de-la-transacci\xf3n-firmada"},"Generar la carga \xfatil de la transacci\xf3n firmada"),(0,r.kt)("p",null,"Este ejemplo muestra c\xf3mo preparar una transacci\xf3n para que la ejecute un tercero. Esta l\xf3gica puede ser implementada del lado del cliente y luego enviada a una aplicaci\xf3n o servicio de terceros, como un servicio de Transaction Relay, para ser ejecutada."),(0,r.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias antes de comenzar este tutorial:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"O bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," o bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/tools-eip191-signer"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/eip191-signer.js")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install web3 @lukso/lsp-smart-contracts @lukso/eip191-signer.js\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts @lukso/eip191-signer.js\n")))),(0,r.kt)("h3",{id:"paso-1---configurar-importaciones-y-constantes"},"Paso 1 - Configurar importaciones y constantes"),(0,r.kt)("p",null,"Para cifrar una transacci\xf3n, necesitamos la direcci\xf3n del contrato inteligente de Perfil Universal y la clave privada de una de las claves del controlador con suficientes ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#permissions"},"permisos LSP6")," para ejecutar la transacci\xf3n."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones y Constantes"',title:'"Importaciones',y:!0,'Constantes"':!0},"import UniversalProfileContract from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManagerContract from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { EIP191Signer } from '@lukso/eip191-signer.js';\nimport { LSP6_VERSION } from '@lukso/lsp-smart-contracts/constants';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x...';\nconst msgValue = 0; // Cantidad de tokens nativos que se enviar\xe1n\n\n// configurar la cuenta del controlador de perfil universal\nconst controllerPrivateKey = '0x...';\nconst controllerAccount = web3.eth.accounts.wallet.add(controllerPrivateKey);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones y Constantes"',title:'"Importaciones',y:!0,'Constantes"':!0},"import UniversalProfileContract from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManagerContract from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { EIP191Signer } from '@lukso/eip191-signer.js';\nimport { LSP6_VERSION } from '@lukso/lsp-smart-contracts/constants';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x...';\nconst msgValue = 0; // Cantidad de tokens nativos que se enviar\xe1n\n\n// configurar la cuenta del controlador de perfil universal\nconst controllerPrivateKey = '0x...';\nconst controllerAccount = new ethers.Wallet(controllerPrivateKey).connect(\n  provider,\n);\n")))),(0,r.kt)("h3",{id:"paso-2---preparar-las-instancias-de-contacto"},"Paso 2 - Preparar las instancias de contacto"),(0,r.kt)("p",null,"Obtendremos las instancias de contrato para el ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp0-erc725account"},"Perfil universal")," y el ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager"},"Gestor de claves")," para utilizarlas posteriormente en esta gu\xeda."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias del contrato"',title:'"Instancias',del:!0,'contrato"':!0},"const universalProfile = new web3.eth.Contract(UniversalProfileContract.abi, universalProfileAddress);\n\nconst keyManagerAddress = await universalProfile.methods.owner().call();\nconst keyManager = new web3.eth.Contract(KeyManagerContract.abi, keyManagerAddress);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias del contrato"',title:'"Instancias',del:!0,'contrato"':!0},"const universalProfile = new ethers.Contract(universalProfileAddress, UniversalProfileContract.abi);\n\nconst keyManagerAddress = await universalProfile.owner();\nconst keyManager = new ethers.Contract(keyManagerAddress, KeyManagerContract.abi);\n")))),(0,r.kt)("h3",{id:"paso-3---obtener-nonce-de-la-direcci\xf3n-del-controlador"},"Paso 3 - Obtener nonce de la direcci\xf3n del controlador"),(0,r.kt)("p",null,"Obt\xe9n el ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," de la clave del controlador desde el KeyManager instanciando la instancia del contrato inteligente KeyManager y llamando a la funci\xf3n ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/smart-contracts/lsp6-key-manager#getnonce"},(0,r.kt)("inlineCode",{parentName:"a"},"getNonce")),"."),(0,r.kt)("p",null,"El ",(0,r.kt)("inlineCode",{parentName:"p"},"channelId")," se utiliza para evitar conflictos de nonce cuando varias aplicaciones env\xedan transacciones al mismo KeyManager al mismo tiempo. M\xe1s informaci\xf3n sobre ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#out-of-order-execution"},"ejecuci\xf3n fuera de orden aqu\xed"),"."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Obtener el nonce de la clave del controlador"',title:'"Obtener',el:!0,nonce:!0,de:!0,la:!0,clave:!0,del:!0,'controlador"':!0},"const channelId = 0;\nconst nonce = await keyManager.methods.getNonce(controllerAccount.address, channelId).call();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Obtener el nonce de la clave del controlador"',title:'"Obtener',el:!0,nonce:!0,de:!0,la:!0,clave:!0,del:!0,'controlador"':!0},"const channelId = 0;\nconst nonce = await keyManager.getNonce(controllerAccount.address, channelId);\n")))),(0,r.kt)("h3",{id:"paso-4---cifrar-el-abi-de-una-transacci\xf3n"},"Paso 4 - Cifrar el ABI de una transacci\xf3n"),(0,r.kt)("p",null,"Cifra el ABI de la transacci\xf3n que quieres que se ejecute. En este caso, una transferencia LYX a una direcci\xf3n de destinatario."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar ABI de transacciones"',title:'"Cifrar',ABI:!0,de:!0,'transacciones"':!0},"const abiPayload = universalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](\n  0, // Operation type: CALL\n  '0x...', // Recipient address\n  web3.utils.toWei('1'), // Value\n  '0x', // Data\n).encodeABI();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar ABI de transacciones"',title:'"Cifrar',ABI:!0,de:!0,'transacciones"':!0},"const abiPayload = universalProfile.interface.encodeFunctionData(\n  'execute(uint256,address,uint256,bytes)',\n  [\n    0, // Operation type: CALL\n    '0x...', // Recipient address\n    web3.utils.toWei('1'), // Value\n    '0x', // Data\n  ],\n);\n")))),(0,r.kt)("admonition",{title:"ERC725X execute",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Puedes encontrar m\xe1s informaci\xf3n sobre la ","[llamada ERC725X ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," aqu\xed]",".(../../standards/smart-contracts/erc725-contract#execute---erc725x).")),(0,r.kt)("p",null,"###Paso 5 - Firmar la transacci\xf3n"),(0,r.kt)("p",null,"A continuaci\xf3n, firma el mensaje de transacci\xf3n a partir de la clave de controlador del Perfil Universal."),(0,r.kt)("p",null,"El mensaje se construye firmando la ",(0,r.kt)("inlineCode",{parentName:"p"},"keyManagerAddress"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keyManagerVersion"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"chainId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," del firmante, ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"abiPayload"),"."),(0,r.kt)("admonition",{title:"ERC725X execute",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Para m\xe1s informaci\xf3n, consulta: ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/es/standards/universal-profile/lsp6-key-manager#how-to-sign-relay-transactions"},"\xbfC\xf3mo firmar transacciones de retransmisi\xf3n?"))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Firmar la transacci\xf3n"',title:'"Firmar',la:!0,'transacci\xf3n"':!0},"const chainId = await web3.eth.getChainId(); // will be 2828 on L16\n\nlet encodedMessage = web3.utils.encodePacked(\n  { value: LSP6_VERSION, type: 'uint256' },\n  { value: chainId, type: 'uint256' },\n  { value: nonce, type: 'uint256' },\n  { value: msgValue, type: 'uint256' },\n  { value: abiPayload, type: 'bytes' },\n);\n\nlet eip191Signer = new EIP191Signer();\n\nlet { signature } = await eip191Signer.signDataWithIntendedValidator(\n  keyManagerAddress,\n  encodedMessage,\n  controllerPrivateKey,\n);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Firmar la transacci\xf3n"',title:'"Firmar',la:!0,'transacci\xf3n"':!0},"const { chainId } = await provider.getNetwork(); // will be 2828 on L16\n\nlet encodedMessage = web3.utils.encodePacked(\n  { value: LSP6_VERSION, type: 'uint256' },\n  { value: chainId, type: 'uint256' },\n  { value: nonce, type: 'uint256' },\n  { value: msgValue, type: 'uint256' },\n  { value: abiPayload, type: 'bytes' },\n);\n\nlet eip191Signer = new EIP191Signer();\n\nlet { signature } = await eip191Signer.signDataWithIntendedValidator(\n  keyManagerAddress,\n  encodedMessage,\n  controllerPrivateKey,\n);\n")))),(0,r.kt)("p",null,"Ahora la ",(0,r.kt)("inlineCode",{parentName:"p"},"signature"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"abiPayload"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"keyManagerAddress")," pueden ser enviados a un tercero para ejecutar la transacci\xf3n usando ",(0,r.kt)("a",{parentName:"p",href:"../../standards/smart-contracts/lsp6-key-manager#executerelaycall"},(0,r.kt)("inlineCode",{parentName:"a"},"executeRelayCall")),"."),(0,r.kt)("h2",{id:"ejecutar-mediante-executerelaycall"},"Ejecutar mediante ",(0,r.kt)("inlineCode",{parentName:"h2"},"executeRelayCall")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Este ejemplo muestra c\xf3mo un tercero puede ejecutar una transacci\xf3n en nombre de otro usuario.")),(0,r.kt)("p",null,"Para ejecutar una transacci\xf3n firmada, la carga \xfatil ABI requiere:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"la ",(0,r.kt)("strong",{parentName:"li"},"direcci\xf3n del contrato KeyManager")),(0,r.kt)("li",{parentName:"ul"},"la ",(0,r.kt)("strong",{parentName:"li"},"carga \xfatil ABI de la transacci\xf3n")),(0,r.kt)("li",{parentName:"ul"},"la ",(0,r.kt)("strong",{parentName:"li"},"carga \xfatil de la transacci\xf3n firmada")),(0,r.kt)("li",{parentName:"ul"},"el ",(0,r.kt)("strong",{parentName:"li"},"nonce")," de la clave del controlador que firm\xf3 la transacci\xf3n.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Para obtener la direcci\xf3n de KeyManager a partir de la direcci\xf3n de UniversalProfile, llama a la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"owner")," del contrato de Perfil Universal.")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Enviar la transacci\xf3n"',title:'"Enviar',la:!0,'transacci\xf3n"':!0},"const executeRelayCallTransaction = await keyManager.methods[\n  'executeRelayCall(bytes,uint256,bytes)'\n](signature, nonce, abiPayload).send({\n  from: controllerAccount.address,\n  gasLimit: 300_000,\n});\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Enviar la transacci\xf3n"',title:'"Enviar',la:!0,'transacci\xf3n"':!0},"const executeRelayCallTransaction = await keyManager\n  .connect(controllerAccount)\n  ['executeRelayCall(bytes,uint256,bytes)'](signature, nonce, abiPayload);\n")))),(0,r.kt)("admonition",{title:"LSP6KeyManager executeRelayCall",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Puedes encontrar m\xe1s informaci\xf3n sobre el ",(0,r.kt)("a",{parentName:"p",href:"../../standards/smart-contracts/lsp6-key-manager#executerelaycall"},"LSP6KeyManager ",(0,r.kt)("inlineCode",{parentName:"a"},"executeRelayCall")," aqu\xed"),".")),(0,r.kt)("h2",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Final code"',title:'"Final','code"':!0},"import UniversalProfileContract from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManagerContract from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { EIP191Signer } from '@lukso/eip191-signer.js';\nimport { LSP6_VERSION } from '@lukso/lsp-smart-contracts/constants';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x...';\nconst msgValue = 0; // Cantidad de tokens nativos que se enviar\xe1n\n\n// configurar la cuenta del controlador de perfil universal\nconst controllerPrivateKey = '0x...';\nconst controllerAccount = web3.eth.accounts.wallet.add(controllerPrivateKey);\n\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfileContract.abi,\n  universalProfileAddress,\n);\n\nconst keyManagerAddress = await universalProfile.methods.owner().call();\nconst keyManager = new web3.eth.Contract(\n  KeyManagerContract.abi,\n  keyManagerAddress,\n);\n\nconst channelId = 0;\nconst nonce = await keyManager.methods\n  .getNonce(controllerAccount.address, channelId)\n  .call();\n\nconst abiPayload = universalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](\n  0, // Tipo de operaci\xf3n: CALL\n  '0x...', // Direcci\xf3n del destinatario\n  web3.utils.toWei('1'), // Valor\n  '0x', // Datos\n).encodeABI();\n\nconst chainId = await web3.eth.getChainId(); // ser\xe1 2828 en la L16\n\nlet encodedMessage = web3.utils.encodePacked(\n  { value: LSP6_VERSION, type: 'uint256' },\n  { value: chainId, type: 'uint256' },\n  { value: nonce, type: 'uint256' },\n  { value: msgValue, type: 'uint256' },\n  { value: abiPayload, type: 'bytes' },\n);\n\nlet eip191Signer = new EIP191Signer();\n\nlet { signature } = await eip191Signer.signDataWithIntendedValidator(\n  keyManagerAddress,\n  encodedMessage,\n  controllerPrivateKey,\n);\n\nconst executeRelayCallTransaction = await keyManager.methods[\n  'executeRelayCall(bytes,uint256,bytes)'\n](signature, nonce, abiPayload).send({\n  from: controllerAccount.address,\n  gasLimit: 300_000,\n});\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Final code"',title:'"Final','code"':!0},"import UniversalProfileContract from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManagerContract from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { EIP191Signer } from '@lukso/eip191-signer.js';\nimport { LSP6_VERSION } from '@lukso/lsp-smart-contracts/constants';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst universalProfileAddress = '0x...';\nconst msgValue = 0; // Cantidad de tokens nativos que se enviar\xe1n\n\n// configurar la cuenta del controlador de perfil universal\nconst controllerPrivateKey = '0x...';\nconst controllerAccount = new ethers.Wallet(controllerPrivateKey).connect(\n  provider,\n);\n\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfileContract.abi,\n);\n\nconst keyManagerAddress = await universalProfile.owner();\nconst keyManager = new ethers.Contract(\n  keyManagerAddress,\n  KeyManagerContract.abi,\n);\n\nconst channelId = 0;\nconst nonce = await keyManager.getNonce(controllerAccount.address, channelId);\n\nconst abiPayload = universalProfile.interface.encodeFunctionData(\n  'execute(uint256,address,uint256,bytes)',\n  [\n    0, // Tipo de operaci\xf3n:: CALL\n    '0x...', // Direcci\xf3n del destinatario\n    web3.utils.toWei('1'), // Valor\n    '0x', // Datos\n  ],\n);\n\nconst { chainId } = await provider.getNetwork(); // ser\xe1 2828 en la L16\n\nlet encodedMessage = web3.utils.encodePacked(\n  { value: LSP6_VERSION, type: 'uint256' },\n  { value: chainId, type: 'uint256' },\n  { value: nonce, type: 'uint256' },\n  { value: msgValue, type: 'uint256' },\n  { value: abiPayload, type: 'bytes' },\n);\n\nlet eip191Signer = new EIP191Signer();\n\nlet { signature } = await eip191Signer.signDataWithIntendedValidator(\n  keyManagerAddress,\n  encodedMessage,\n  controllerPrivateKey,\n);\n\nconst executeRelayCallTransaction = await keyManager\n  .connect(controllerAccount)\n  ['executeRelayCall(bytes,uint256,bytes)'](signature, nonce, abiPayload);\n")))))}m.isMDXComponent=!0}}]);