"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[6859],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>v});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),c=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},d=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),v=r,m=p["".concat(o,".").concat(v)]||p[v]||u[v]||l;return t?n.createElement(m,s(s({ref:a},d),{},{components:t})):n.createElement(m,s({ref:a},d))}));function v(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=p;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<l;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>s});var n=t(7294),r=t(6010);const l="tabItem_Ymn6";function s(e){let{children:a,hidden:t,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>U});var n=t(7462),r=t(7294),l=t(6010),s=t(2466),i=t(6775),o=t(1980),c=t(7392),d=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:r}}=e;return{value:a,label:t,attributes:n,default:r}}))}function p(e){const{values:a,children:t}=e;return(0,r.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function v(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function m(e){let{queryString:a=!1,groupId:t}=e;const n=(0,i.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(n.location.search);a.set(l,e),n.replace({...n.location,search:a.toString()})}),[l,n])]}function g(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,l=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!v({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:l}))),[o,c]=m({queryString:t,groupId:n}),[u,g]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,l]=(0,d.Nk)(t);return[n,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:n}),f=(()=>{const e=o??u;return v({value:e,tabValues:l})?e:null})();(0,r.useEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!v({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,l]),tabValues:l}}var f=t(2389);const b="tabList__CuJ",y="tabItem_LNqP";function k(e){let{className:a,block:t,selectedValue:i,selectValue:o,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),p=e=>{const a=e.currentTarget,t=d.indexOf(a),n=c[t].value;n!==i&&(u(a),o(n))},v=e=>{var a;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}null==(a=t)||a.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>d.push(e),onKeyDown:v,onClick:p},s,{className:(0,l.Z)("tabs__item",y,null==s?void 0:s.className,{"tabs__item--active":i===a})}),t??a)})))}function P(e){let{lazy:a,children:t,selectedValue:n}=e;if(a){const e=t.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function D(e){const a=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b)},r.createElement(k,(0,n.Z)({},e,a)),r.createElement(P,(0,n.Z)({},e,a)))}function U(e){const a=(0,f.Z)();return r.createElement(D,(0,n.Z)({key:String(a)},e))}},3947:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>v,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=t(7462),r=(t(7294),t(3905)),l=t(4866),s=t(5162);const i={sidebar_label:"Editar datos de una B\xf3veda",sidebar_position:2},o="Editar datos de una B\xf3veda",c={unversionedId:"es/guides/vault/edit-vault-data",id:"es/guides/vault/edit-vault-data",title:"Editar datos de una B\xf3veda",description:"Esta gu\xeda te ense\xf1ar\xe1 c\xf3mo adjuntar datos a un contrato LSP9Vault. Se puede adjuntar cualquier dato a la b\xf3veda, y puesto que admite el est\xe1ndar LSP1-UniversalReceiver, estableceremos la direcci\xf3n Receptor Delegado Universal dentro del almacenamiento.",source:"@site/docs/es/guides/vault/edit-vault-data.md",sourceDirName:"es/guides/vault",slug:"/es/guides/vault/edit-vault-data",permalink:"/lukso-es/en/es/guides/vault/edit-vault-data",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/vault/edit-vault-data.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"Apr 3, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Editar datos de una B\xf3veda",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Crear una B\xf3veda",permalink:"/lukso-es/en/es/guides/vault/create-a-vault"},next:{title:"Interactuar con Contratos",permalink:"/lukso-es/en/es/guides/vault/interact-with-contracts"}},d={},u=[{value:"Configuraci\xf3n de datos (Receptor Delegado Universal)",id:"configuraci\xf3n-de-datos-receptor-delegado-universal",level:2},{value:"Configuraci\xf3n",id:"configuraci\xf3n",level:2},{value:"Paso 1 - Importaciones, Constantes y EOA",id:"paso-1---importaciones-constantes-y-eoa",level:2},{value:"Paso 2 - Implementaci\xf3n del Receptor Delegado Universal (URD)",id:"paso-2---implementaci\xf3n-del-receptor-delegado-universal-urd",level:2},{value:"Crear una instancia de contrato",id:"crear-una-instancia-de-contrato",level:3},{value:"Enviar la transacci\xf3n de despliegue del contrato",id:"enviar-la-transacci\xf3n-de-despliegue-del-contrato",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final",level:3},{value:"Paso 3 - Establecer la direcci\xf3n URD en el almac\xe9n",id:"paso-3---establecer-la-direcci\xf3n-urd-en-el-almac\xe9n",level:2},{value:"Crear las instancias de los contratos",id:"crear-las-instancias-de-los-contratos",level:3},{value:"Cifrar el calldata <code>setData(..)</code>.",id:"cifrar-el-calldata-setdata",level:3},{value:"Cifrar <code>execute(..)</code> calldata",id:"cifrar-execute-calldata",level:3},{value:"Enviar transacci\xf3n a trav\xe9s del Gestor de Claves",id:"enviar-transacci\xf3n-a-trav\xe9s-del-gestor-de-claves",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final-1",level:3},{value:"C\xf3digo final - Implementaci\xf3n y Actualizaci\xf3n",id:"c\xf3digo-final---implementaci\xf3n-y-actualizaci\xf3n",level:2},{value:"Lectura de Datos",id:"lectura-de-datos",level:2}],p={toc:u};function v(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"editar-datos-de-una-b\xf3veda"},"Editar datos de una B\xf3veda"),(0,r.kt)("p",null,"Esta gu\xeda te ense\xf1ar\xe1 c\xf3mo adjuntar datos a un contrato ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/smart-contracts/lsp9-vault"},"LSP9Vault")),". Se puede adjuntar cualquier dato a la b\xf3veda, y puesto que admite el est\xe1ndar ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/generic-standards/lsp1-universal-receiver"},"LSP1-UniversalReceiver")),", estableceremos la direcci\xf3n ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/en/es/standards/smart-contracts/lsp1-universal-receiver-delegate-vault"},(0,r.kt)("strong",{parentName:"a"},"Receptor Delegado Universal"))," dentro del almacenamiento."),(0,r.kt)("h2",{id:"configuraci\xf3n-de-datos-receptor-delegado-universal"},"Configuraci\xf3n de datos (Receptor Delegado Universal)"),(0,r.kt)("p",null,"La implementaci\xf3n por defecto del ",(0,r.kt)("strong",{parentName:"p"},"Receptor Delegado Universal")," de la B\xf3veda que desplegaremos registrar\xe1 los activos recibidos al almacenamiento y los eliminar\xe1 cuando su saldo sea igual a 0."),(0,r.kt)("h2",{id:"configuraci\xf3n"},"Configuraci\xf3n"),(0,r.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias antes de empezar este tutorial:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"O bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,r.kt)("inlineCode",{parentName:"a"},"web3.js"))," o bien ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,r.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,r.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instala las dependencias"',title:'"Instala',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,r.kt)("h2",{id:"paso-1---importaciones-constantes-y-eoa"},"Paso 1 - Importaciones, Constantes y EOA"),(0,r.kt)("p",null,"Para empezar necesitamos obtener los ",(0,r.kt)("em",{parentName:"p"},"ABIs")," de los contratos que utilizaremos y el ",(0,r.kt)("em",{parentName:"p"},"bytecode")," del ",(0,r.kt)("inlineCode",{parentName:"p"},"LSP1UniversalReceiverDelegateVault"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Despu\xe9s tenemos que almacenar la direcci\xf3n de nuestro B\xf3veda LSP9 y nuestro Perfil Universal.",(0,r.kt)("br",{parentName:"p"}),"\n","Despu\xe9s inicializaremos el EOA que utilizaremos m\xe1s adelante."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,r.kt)("h2",{id:"paso-2---implementaci\xf3n-del-receptor-delegado-universal-urd"},"Paso 2 - Implementaci\xf3n del Receptor Delegado Universal (URD)"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"El ",(0,r.kt)("strong",{parentName:"p"},"Perfil Universal")," y la ",(0,r.kt)("strong",{parentName:"p"},"B\xf3veda")," no utilizan la misma implementaci\xf3n del Receptor Delegado Universal.")),(0,r.kt)("h3",{id:"crear-una-instancia-de-contrato"},"Crear una instancia de contrato"),(0,r.kt)("p",null,"En este paso crearemos una instancia del URD de la B\xf3veda que posteriormente utilizaremos para desplegar una."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancia del contrato LSP9 del URD de la B\xf3veda "',title:'"Instancia',del:!0,contrato:!0,LSP9:!0,URD:!0,de:!0,la:!0,"B\xf3veda":!0,'"':!0},"// crear una instancia de LSP1UniversalReceiverDelegateVault\nconst vaultURD = new web3.eth.Contract(LSP1UniversalReceiverDelegateVault.abi);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancia del contrato LSP9 del URD de la B\xf3veda "',title:'"Instancia',del:!0,contrato:!0,LSP9:!0,URD:!0,de:!0,la:!0,"B\xf3veda":!0,'"':!0},"// crear una F\xe1brica de Contratos LSP1UniversalReceiverDelegateVault\nconst vaultURDFactory = new ethers.ContractFactory(\n  LSP1UniversalReceiverDelegateVault.abi,\n  LSP1UniversalReceiverDelegateVault.bytecode,\n);\n")))),(0,r.kt)("h3",{id:"enviar-la-transacci\xf3n-de-despliegue-del-contrato"},"Enviar la transacci\xf3n de despliegue del contrato"),(0,r.kt)("p",null,"Env\xeda la transacci\xf3n de despliegue y en unos segundos obtendr\xe1s un nuevo URD de B\xf3veda desplegado."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar la transacci\xf3n para desplegar una nuevo URD de B\xf3veda LSP9"',title:'"Enviar',la:!0,"transacci\xf3n":!0,para:!0,desplegar:!0,una:!0,nuevo:!0,URD:!0,de:!0,"B\xf3veda":!0,'LSP9"':!0},"// desplegar el contrato Receptor Delegado Universal de B\xf3veda\nawait vaultURD\n  .deploy({\n    data: LSP1UniversalReceiverDelegateVault.bytecode,\n  })\n  .send({\n    from: myEOA.address,\n    gas: 5_000_000,\n    gasPrice: '1000000000',\n  });\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar la transacci\xf3n para desplegar una nuevo URD de B\xf3veda LSP9"',title:'"Enviar',la:!0,"transacci\xf3n":!0,para:!0,desplegar:!0,una:!0,nuevo:!0,URD:!0,de:!0,"B\xf3veda":!0,'LSP9"':!0},"// desplegar el contrato Receptor Delegado Universal de B\xf3veda\nconst vaultURD = await vaultURDFactory.connect(myEOA).deploy();\n")))),(0,r.kt)("h3",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Desplegar un nuevo Delegado de Recepci\xf3n Universal de B\xf3veda LSP9"',title:'"Desplegar',un:!0,nuevo:!0,Delegado:!0,de:!0,"Recepci\xf3n":!0,Universal:!0,"B\xf3veda":!0,'LSP9"':!0},"const deployVaultURD = async () => {\n  // crear una instancia de LSP1UniversalReceiverDelegateVault\n  const vaultURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateVault.abi,\n  );\n\n  // desplegar el contrato Receptor Delegado Universal de B\xf3veda\n  const vaultURDAddress = await vaultURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateVault.bytecode,\n    })\n    .send({\n      from: myEOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => {\n      return receipt.contractAddress;\n    });\n\n  return vaultURDAddress;\n};\n\n// desplegar un nuevo URD de B\xf3veda y recuperar su direcci\xf3n\nconst vaultURDAddress = await deployVaultURD();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Desplegar un nuevo Delegado de Recepci\xf3n Universal de B\xf3veda LSP9"',title:'"Desplegar',un:!0,nuevo:!0,Delegado:!0,de:!0,"Recepci\xf3n":!0,Universal:!0,"B\xf3veda":!0,'LSP9"':!0},"const deployVaultURD = async () => {\n  // crear una F\xe1brica de Contratos LSP1UniversalReceiverDelegateVault\n  const vaultURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateVault.abi,\n    LSP1UniversalReceiverDelegateVault.bytecode,\n  );\n\n  // desplegar el contrato Receptor Delegado Universal de B\xf3veda\n  const vaultURD = await vaultURDFactory.connect(myEOA).deploy();\n\n  return vaultURD.target;\n};\n\n// desplegar un nuevo URD de B\xf3veda y recuperar su direcci\xf3n\nconst vaultURDAddress = await deployVaultURD();\n")))),(0,r.kt)("h2",{id:"paso-3---establecer-la-direcci\xf3n-urd-en-el-almac\xe9n"},"Paso 3 - Establecer la direcci\xf3n URD en el almac\xe9n"),(0,r.kt)("p",null,"El propietario del B\xf3veda puede ser una ",(0,r.kt)("strong",{parentName:"p"},"EOA"),", o cualquier ",(0,r.kt)("strong",{parentName:"p"},"otro contrato inteligente"),". En nuestro caso, supondremos que el propietario de la B\xf3veda es un ",(0,r.kt)("a",{parentName:"p",href:"/lukso-es/en/es/standards/universal-profile/introduction"},"Perfil Universal")," que est\xe1 controlado por un Gestor de Claves."),(0,r.kt)("h3",{id:"crear-las-instancias-de-los-contratos"},"Crear las instancias de los contratos"),(0,r.kt)("p",null,"En primer lugar, debemos crear instancias para los siguientes contratos:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp9-vault"},(0,r.kt)("strong",{parentName:"a"},"B\xf3veda"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp0-erc725account"},(0,r.kt)("strong",{parentName:"a"},"Perfil universal"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp6-key-manager"},(0,r.kt)("strong",{parentName:"a"},"Gestor de Claves")))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de contratos para el Perfil Universal, Gestor de Claves y la B\xf3veda"',title:'"Instancias',de:!0,contratos:!0,para:!0,el:!0,Perfil:!0,"Universal,":!0,Gestor:!0,Claves:!0,y:!0,la:!0,'B\xf3veda"':!0},"// crear una instancia de la LSP9Vault\nconst vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n// crear una instancia del Perfil Universal\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// obtener el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del LSP6KeyManager\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de contratos para el Perfil Universal, Gestor de Claves y la B\xf3veda"',title:'"Instancias',de:!0,contratos:!0,para:!0,el:!0,Perfil:!0,"Universal,":!0,Gestor:!0,Claves:!0,y:!0,la:!0,'B\xf3veda"':!0},"// crear una instancia de la LSP9Vault\nconst vault = new ethers.Contract(vaultAddress, LSP9Vault.abi);\n// crear una instancia del Perfil Universal\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// obtener el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del LSP6KeyManager\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n")))),(0,r.kt)("h3",{id:"cifrar-el-calldata-setdata"},"Cifrar el calldata ",(0,r.kt)("inlineCode",{parentName:"h3"},"setData(..)"),"."),(0,r.kt)("p",null,"En segundo lugar, tenemos que cifrar un calldata que actualizar\xe1 la direcci\xf3n del URD de la b\xf3veda."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata para actualizar el URD de la B\xf3veda LSP9"',title:'"Calldata',para:!0,actualizar:!0,el:!0,URD:!0,de:!0,la:!0,"B\xf3veda":!0,'LSP9"':!0},"// cifrar setData Calldata en la B\xf3veda\nconst setDataCalldata = await vault.methods['setData(bytes32,bytes)'](\n  ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n  vaultURDAddress,\n).encodeABI(); // Cualquier otra informaci\xf3n puede almacenarse aqu\xed\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata para actualizar el URD de la B\xf3veda LSP9"',title:'"Calldata',para:!0,actualizar:!0,el:!0,URD:!0,de:!0,la:!0,"B\xf3veda":!0,'LSP9"':!0},"// cifrar setData Calldata en la B\xf3veda\nconst setDataCalldata = vault.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate, vaultURDAddress],\n); // Cualquier otra informaci\xf3n puede almacenarse aqu\xed\n")))),(0,r.kt)("h3",{id:"cifrar-execute-calldata"},"Cifrar ",(0,r.kt)("inlineCode",{parentName:"h3"},"execute(..)")," calldata"),(0,r.kt)("p",null,"En tercer lugar, necesitamos cifrar otro calldata que activar\xe1 el ",(0,r.kt)("a",{parentName:"p",href:"#paso-32---encode-setdata-calldata"},"calldata que actualizar\xe1 los datos del URD de Vault"),"."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata para ejecutar un setData(..) calldata a trav\xe9s del Perfil Universal"',title:'"Calldata',para:!0,ejecutar:!0,un:!0,"setData(..)":!0,calldata:!0,a:!0,"trav\xe9s":!0,del:!0,Perfil:!0,'Universal"':!0},"// cifrar ejecutar Calldata en el UP\nconst executeCalldata = await universalProfile.methods[\n  'execute(uint256,address,uint256,bytes)'\n](\n  0, // OPERATION CALL\n  vaultAddress,\n  0, // valor a transferir\n  setDataCalldata,\n).encodeABI();\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Calldata para ejecutar un setData(..) calldata a trav\xe9s del Perfil Universal"',title:'"Calldata',para:!0,ejecutar:!0,un:!0,"setData(..)":!0,calldata:!0,a:!0,"trav\xe9s":!0,del:!0,Perfil:!0,'Universal"':!0},"// cifrar ejecutar Calldata en el UP\nconst executeCalldata = universalProfile.interface.encodeFunctionData(\n  'execute(uint256,address,uint256,bytes)',\n  [\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // valor a transferir\n    setDataCalldata,\n  ],\n);\n")))),(0,r.kt)("h3",{id:"enviar-transacci\xf3n-a-trav\xe9s-del-gestor-de-claves"},"Enviar transacci\xf3n a trav\xe9s del Gestor de Claves"),(0,r.kt)("p",null,"Por \xfaltimo, necesitamos enviar la transacci\xf3n que enviar\xe1 los ",(0,r.kt)("a",{parentName:"p",href:"#paso-33---encode-execute-calldata"},(0,r.kt)("inlineCode",{parentName:"a"},"execute(..)")," calldata")," al Perfil Universal a trav\xe9s del Gestor de Claves."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ejecutar el calldata en el Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Ejecutar',el:!0,calldata:!0,en:!0,Perfil:!0,Universal:!0,a:!0,"trav\xe9s":!0,del:!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el `executeCalldata` en el Gestor de Claves\nawait keyManager.methods['execute(bytes)'](executeCalldata).send({\n  from: myEOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ejecutar el calldata en el Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Ejecutar',el:!0,calldata:!0,en:!0,Perfil:!0,Universal:!0,a:!0,"trav\xe9s":!0,del:!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el `executeCalldata` en el Gestor de Claves\nawait keyManager.connect(myEOA)['execute(bytes)'](executeCalldata);\n")))),(0,r.kt)("h3",{id:"c\xf3digo-final-1"},"C\xf3digo final"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Actualizar el URD de B\xf3veda por el reci\xe9n desplegado."',title:'"Actualizar',el:!0,URD:!0,de:!0,"B\xf3veda":!0,por:!0,"reci\xe9n":!0,'desplegado."':!0},"const updateVaultURD = async (vaultURDAddress) => {\n  // crear una instancia de la LSP9Vault\n  const vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n  // crear una instancia del Perfil Universal\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del LSP6KeyManager\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  // cifrar setData Calldata en la B\xf3veda\n  const setDataCalldata = await vault.methods['setData(bytes32,bytes)'](\n    ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n    vaultURDAddress,\n  ).encodeABI(); // Cualquier otra informaci\xf3n puede almacenarse aqu\xed\n\n  // cifrar ejecutar Calldata en el UP\n  const executeCalldata = await universalProfile.methods[\n    'execute(uint256,address,uint256,bytes)'\n  ](\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // valor a transferir\n    setDataCalldata,\n  ).encodeABI();\n\n  // ejecuta el `executeCalldata` en el KM\n  await keyManager.methods['execute(bytes)'](executeCalldata).send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// actualizar el URD de la b\xf3veda actual\nawait updateVaultURD(vaultURDAddress);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Actualizar el URD de B\xf3veda por el reci\xe9n desplegado."',title:'"Actualizar',el:!0,URD:!0,de:!0,"B\xf3veda":!0,por:!0,"reci\xe9n":!0,'desplegado."':!0},"const updateVaultURD = async (vaultURDAddress) => {\n  // crear una instancia de la LSP9Vault\n  const vault = new ethers.Contract(vaultAddress, LSP9Vault.abi);\n  // crear una instancia del Perfil Universal\n  const universalProfile = new ethers.Contract(\n    universalProfileAddress,\n    UniversalProfile.abi,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del LSP6KeyManager\n  const keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\n  // cifrar setData Calldata en la B\xf3veda\n  const setDataCalldata = vault.interface.encodeFunctionData(\n    'setData(bytes32,bytes)',\n    [ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate, vaultURDAddress],\n  ); // Cualquier otra informaci\xf3n puede almacenarse aqu\xed\n\n  // cifrar ejecutar Calldata en el UP\n  const executeCalldata = universalProfile.interface.encodeFunctionData(\n    'execute(uint256,address,uint256,bytes)',\n    [\n      0, // OPERATION CALL\n      vaultAddress,\n      0, // valor a transferir\n      setDataCalldata,\n    ],\n  );\n\n  // ejecuta el `executeCalldata` en el KM\n  await keyManager.connect(myEOA)['execute(bytes)'](executeCalldata);\n};\n\n// actualizar el URD de la b\xf3veda actual\nawait updateVaultURD(vaultURDAddress);\n")))),(0,r.kt)("h2",{id:"c\xf3digo-final---implementaci\xf3n-y-actualizaci\xf3n"},"C\xf3digo final - Implementaci\xf3n y Actualizaci\xf3n"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Implementaci\xf3n del nuevo URD de B\xf3veda y actualizaci\xf3n del URD de B\xf3veda"',title:'"Implementaci\xf3n',del:!0,nuevo:!0,URD:!0,de:!0,"B\xf3veda":!0,y:!0,"actualizaci\xf3n":!0,'B\xf3veda"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst myEOA = web3.eth.accounts.wallet.add(privateKey);\n\nconst deployVaultURD = async () => {\n  // crear una instancia de LSP1UniversalReceiverDelegateVault\n  const vaultURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateVault.abi,\n  );\n\n  // desplegar el contrato Receptor Delegado Universal de B\xf3veda\n  const vaultURDAddress = await vaultURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateVault.bytecode,\n    })\n    .send({\n      from: myEOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => {\n      return receipt.contractAddress;\n    });\n\n  return vaultURDAddress;\n};\n\nconst updateVaultURD = async (vaultURDAddress) => {\n  // crear una instancia de la LSP9Vault\n  const vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n  // crear una instancia del Perfil Universal\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del LSP6KeyManager\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  // cifrar setData Calldata en la B\xf3veda\n  const setDataCalldata = await vault.methods['setData(bytes32,bytes)'](\n    ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n    vaultURDAddress,\n  ).encodeABI(); // Cualquier otra informaci\xf3n puede almacenarse aqu\xed\n\n  // cifrar ejecutar Calldata en el UP\n  const executeCalldata = await universalProfile.methods[\n    'execute(uint256,address,uint256,bytes)'\n  ](\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // valor a transferir\n    setDataCalldata,\n  ).encodeABI();\n\n  // ejecuta el `executeCalldata` en el KM\n  await keyManager.methods['execute(bytes)'](executeCalldata).send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// desplegar un nuevo URD de B\xf3veda y recuperar su direcci\xf3n\nconst vaultURDAddress = await deployVaultURD();\n// actualizar el URD de la b\xf3veda actual\nawait updateVaultURD(vaultURDAddress);\n"))),(0,r.kt)(s.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Implementaci\xf3n del nuevo URD de B\xf3veda y actualizaci\xf3n del URD de B\xf3veda"',title:'"Implementaci\xf3n',del:!0,nuevo:!0,URD:!0,de:!0,"B\xf3veda":!0,y:!0,"actualizaci\xf3n":!0,'B\xf3veda"':!0},"import LSP1UniversalReceiverDelegateVault from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateVault.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport LSP9Vault from '@lukso/lsp-smart-contracts/artifacts/LSP9Vault.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst vaultAddress = '0x...';\nconst universalProfileAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst myEOA = new ethers.Wallet(privateKey).connect(provider);\n\nconst deployVaultURD = async () => {\n  // crear una F\xe1brica de Contratos LSP1UniversalReceiverDelegateVault\n  const vaultURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateVault.abi,\n    LSP1UniversalReceiverDelegateVault.bytecode,\n  );\n\n  // desplegar el contrato Receptor Delegado Universal de B\xf3veda\n  const vaultURD = await vaultURDFactory.connect(myEOA).deploy();\n\n  return vaultURD.target;\n};\n\nconst updateVaultURD = async (vaultURDAddress) => {\n  // crear una instancia de la LSP9Vault\n  const vault = new web3.eth.Contract(LSP9Vault.abi, vaultAddress);\n  // crear una instancia del Perfil Universal\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del LSP6KeyManager\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  // cifrar setData Calldata en la B\xf3veda\n  const setDataCalldata = await vault.methods['setData(bytes32,bytes)'](\n    ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate,\n    vaultURDAddress,\n  ).encodeABI(); // Cualquier otra informaci\xf3n puede almacenarse aqu\xed\n\n  // cifrar ejecutar Calldata en el UP\n  const executeCalldata = await universalProfile.methods[\n    'execute(uint256,address,uint256,bytes)'\n  ](\n    0, // OPERATION CALL\n    vaultAddress,\n    0, // valor a transferir\n    setDataCalldata,\n  ).encodeABI();\n\n  // ejecuta el `executeCalldata` en el KM\n  await keyManager.methods['execute(bytes)'](executeCalldata).send({\n    from: myEOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// desplegar un nuevo URD de B\xf3veda y recuperar su direcci\xf3n\nconst vaultURDAddress = await deployVaultURD();\n// actualizar el URD de la b\xf3veda actual\nawait updateVaultURD(vaultURDAddress);\n")))),(0,r.kt)("h2",{id:"lectura-de-datos"},"Lectura de Datos"),(0,r.kt)("p",null,"El contrato ",(0,r.kt)("strong",{parentName:"p"},"LSP9Vault")," es un contrato ",(0,r.kt)("strong",{parentName:"p"},"ERC725"),", por lo que comparte la misma forma de lectura de datos que los Perfiles Universales y otros contratos ERC725 utilizando ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/tools/erc725js/getting-started"},"erc725.js")),"."),(0,r.kt)("p",null,"Puedes consultar esta ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/guides/universal-profile/read-profile-data"},"gu\xeda anterior"))," para aprender a ",(0,r.kt)("strong",{parentName:"p"},"recopilar datos")," (activos recibidos, activos emitidos, etc..). Ten en cuenta que tendr\xe1s que sustituir la direcci\xf3n del ",(0,r.kt)("strong",{parentName:"p"},"Perfil Universal")," por la direcci\xf3n de la ",(0,r.kt)("strong",{parentName:"p"},"B\xf3veda"),"."))}v.isMDXComponent=!0}}]);