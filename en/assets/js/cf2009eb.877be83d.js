"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[6369],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>m});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=r.createContext({}),c=function(e){var a=r.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},d=function(e){var a=c(e.components);return r.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=n,v=p["".concat(o,".").concat(m)]||p[m]||u[m]||s;return t?r.createElement(v,l(l({ref:a},d),{},{components:t})):r.createElement(v,l({ref:a},d))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,l=new Array(s);l[0]=p;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<s;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>l});var r=t(7294),n=t(6010);const s="tabItem_Ymn6";function l(e){let{children:a,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(s,l),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>D});var r=t(7462),n=t(7294),s=t(6010),l=t(2466),i=t(6775),o=t(1980),c=t(7392),d=t(12);function u(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function p(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function v(e){let{queryString:a=!1,groupId:t}=e;const r=(0,i.k6)(),s=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,o._X)(s),(0,n.useCallback)((e=>{if(!s)return;const a=new URLSearchParams(r.location.search);a.set(s,e),r.replace({...r.location,search:a.toString()})}),[s,r])]}function f(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,s=p(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:s}))),[o,c]=v({queryString:t,groupId:r}),[u,f]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,s]=(0,d.Nk)(t);return[r,(0,n.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),g=(()=>{const e=o??u;return m({value:e,tabValues:s})?e:null})();(0,n.useEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),f(e)}),[c,f,s]),tabValues:s}}var g=t(2389);const b="tabList__CuJ",k="tabItem_LNqP";function y(e){let{className:a,block:t,selectedValue:i,selectValue:o,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),p=e=>{const a=e.currentTarget,t=d.indexOf(a),r=c[t].value;r!==i&&(u(a),o(r))},m=e=>{var a;let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}null==(a=t)||a.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:l}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>d.push(e),onKeyDown:m,onClick:p},l,{className:(0,s.Z)("tabs__item",k,null==l?void 0:l.className,{"tabs__item--active":i===a})}),t??a)})))}function h(e){let{lazy:a,children:t,selectedValue:r}=e;if(a){const e=t.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},t.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function P(e){const a=f(e);return n.createElement("div",{className:(0,s.Z)("tabs-container",b)},n.createElement(y,(0,r.Z)({},e,a)),n.createElement(h,(0,r.Z)({},e,a)))}function D(e){const a=(0,g.Z)();return n.createElement(P,(0,r.Z)({key:String(a)},e))}},7086:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=t(7462),n=(t(7294),t(3905)),s=t(4866),l=t(5162);const i={sidebar_label:"Aceptar y Rechazar Activos Digitales",sidebar_position:2},o="Aceptar y Rechazar Activos Digitales",c={unversionedId:"es/guides/universal-receiver-delegate/accept-reject-assets",id:"es/guides/universal-receiver-delegate/accept-reject-assets",title:"Aceptar y Rechazar Activos Digitales",description:"Cada usuario puede crear su propio contrato Universal Receiver Delegate personalizado que contenga su propia l\xf3gica que se ejecutar\xe1 una vez que se llame a la funci\xf3n universalReceiver(..) de su perfil..",source:"@site/docs/es/guides/universal-receiver-delegate/accept-reject-assets.md",sourceDirName:"es/guides/universal-receiver-delegate",slug:"/es/guides/universal-receiver-delegate/accept-reject-assets",permalink:"/lukso-es/en/es/guides/universal-receiver-delegate/accept-reject-assets",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/universal-receiver-delegate/accept-reject-assets.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"Apr 3, 2023",sidebarPosition:2,frontMatter:{sidebar_label:"Aceptar y Rechazar Activos Digitales",sidebar_position:2},sidebar:"guidesSidebar",previous:{title:"Establecer la implementaci\xf3n por defecto",permalink:"/lukso-es/en/es/guides/universal-receiver-delegate/set-default-implementation"},next:{title:"Crear un Activo Digital LSP7 (Token)",permalink:"/lukso-es/en/es/guides/digital-assets/create-lsp7-digital-asset"}},d={},u=[{value:"Rechazar todos los activos",id:"rechazar-todos-los-activos",level:2},{value:"Desplegar el contrato con Remix",id:"desplegar-el-contrato-con-remix",level:3},{value:"Fijar la direcci\xf3n del URD en el almac\xe9n",id:"fijar-la-direcci\xf3n-del-urd-en-el-almac\xe9n",level:3},{value:"Instalar dependencias",id:"instalar-dependencias",level:3},{value:"Importaciones, Constantes y EOA",id:"importaciones-constantes-y-eoa",level:3},{value:"Crear instancias de contratos",id:"crear-instancias-de-contratos",level:3},{value:"Cifrar el calldata <code>setData(...)</code>.",id:"cifrar-el-calldata-setdata",level:3},{value:"Ejecutar a trav\xe9s del Gestor de Claves",id:"ejecutar-a-trav\xe9s-del-gestor-de-claves",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final",level:3},{value:"Aceptar Activos espec\xedficos",id:"aceptar-activos-espec\xedficos",level:2}],p={toc:u};function m(e){let{components:a,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,i,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"aceptar-y-rechazar-activos-digitales"},"Aceptar y Rechazar Activos Digitales"),(0,n.kt)("p",null,"Cada usuario puede crear su propio contrato ",(0,n.kt)("strong",{parentName:"p"},"Universal Receiver Delegate personalizado")," que contenga su propia l\xf3gica que se ejecutar\xe1 una vez que se llame a la funci\xf3n ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/smart-contracts/lsp0-erc725-account#universalreceiver"},(0,n.kt)("inlineCode",{parentName:"a"},"universalReceiver(..)")))," de su perfil.. "),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"LSP1UniversalReceiverDelegate-Gu\xeda",src:t(736).Z,width:"2612",height:"1531"})),(0,n.kt)("h2",{id:"rechazar-todos-los-activos"},"Rechazar todos los activos"),(0,n.kt)("p",null,"Para ",(0,n.kt)("strong",{parentName:"p"},"rechazar todos los activos")," que se est\xe1n transfiriendo al perfil, necesitamos crear un contrato de Universal Receiver Delegate que revierta cuando se trate de una transferencia de activos (LSP7 & LSP8). El ",(0,n.kt)("a",{parentName:"p",href:"/lukso-es/en/es/standards/smart-contracts/lsp0-erc725-account#universalreceiver"},(0,n.kt)("inlineCode",{parentName:"a"},"typeId"))," es el par\xe1metro que nos dar\xe1 m\xe1s contexto sobre la llamada que se est\xe1 realizando."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"ejemplo")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Si ",(0,n.kt)("inlineCode",{parentName:"p"},"typeId")," es ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://github.com/lukso-network/lsp-smart-contracts/blob/develop/contracts/LSP7DigitalAsset/LSP7Constants.sol#L13"},(0,n.kt)("inlineCode",{parentName:"a"},"0xdbe2c314e1aee2970c72666f2ebe8933a8575263ea71e5ff6a9178e95d47a26f")," _TYPEID_LSP7_TOKENSRECIPIENT")),", entonces sabemos que estamos recibiendo un Token LSP7.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Si ",(0,n.kt)("inlineCode",{parentName:"p"},"typeId")," es ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://github.com/lukso-network/lsp-smart-contracts/blob/develop/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol#L21"},(0,n.kt)("inlineCode",{parentName:"a"},"0xc7a120a42b6057a0cbed111fbbfbd52fcd96748c04394f77fc2c3adbe0391e01")," _TYPEID_LSP8_TOKENSRECIPIENT")),", entonces sabemos que estamos recibiendo un Token LSP8."))),(0,n.kt)("h3",{id:"desplegar-el-contrato-con-remix"},"Desplegar el contrato con Remix"),(0,n.kt)("p",null,"El primer paso es navegar al ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://remix.ethereum.org/"},"sitio web de Remix"))," y crear un nuevo archivo solidity en la carpeta ",(0,n.kt)("strong",{parentName:"p"},"contracts"),".."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Creando Universal Receiver Delegate con Remix",src:t(3706).Z,width:"2998",height:"1334"})),(0,n.kt)("p",null,"Despu\xe9s de crear el archivo ",(0,n.kt)("strong",{parentName:"p"},"UniversalReceiverDelegate.sol"),", copia el fragmento de c\xf3digo que aparece a continuaci\xf3n dentro del archivo creado. Este fragmento de c\xf3digo se encargar\xe1 de rechazar todos los activos LSP7 y LSP8 que se transfieran a su perfil.."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="UniversalReceiverDelegate.sol - Solidity Code snippet of the URD that reject all assets"',title:'"UniversalReceiverDelegate.sol',"-":!0,Solidity:!0,Code:!0,snippet:!0,of:!0,the:!0,URD:!0,that:!0,reject:!0,all:!0,'assets"':!0},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// Este c\xf3digo s\xf3lo se utiliza como gu\xeda, funciona pero no ha sido verificado ni auditado.\n\n// interfaces\nimport {LSP1UniversalReceiverDelegateUP} from "https://github.com/lukso-network/lsp-smart-contracts/blob/v0.6.2/contracts/LSP1UniversalReceiver/LSP1UniversalReceiverDelegateUP/LSP1UniversalReceiverDelegateUP.sol";\n\n// constantes\nimport {_TYPEID_LSP7_TOKENSRECIPIENT} from "https://github.com/lukso-network/lsp-smart-contracts/blob/v0.6.2/contracts/LSP7DigitalAsset/LSP7Constants.sol";\nimport {_TYPEID_LSP8_TOKENSRECIPIENT} from "https://github.com/lukso-network/lsp-smart-contracts/blob/v0.6.2/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol";\n\ncontract CustomUniversalReceiverDelegate is LSP1UniversalReceiverDelegateUP  {\n\n    /**\n    * @param asset La direcci\xf3n del activo que se transfiere al UniversalProfile.\n    * @param asset La direcci\xf3n que impide recibir activos.\n    */\n    error ReceivingAssetsNotAllowed(address asset, address recipient);\n\n    /**\n    * @dev Revierte cuando el typeId es referente a la recepci\xf3n de tokens (LSP7 & LSP8) \n    * @param caller La direcci\xf3n del activo que informa a la funci\xf3n `universalReceiver(..)` en el UniversalProfile.\n    * @param value La cantidad de tokens nativos enviados por la persona que llama al universalReceiver en el UniversalProfile..\n    * @param typeId El typeId que representa el contexto de la llamada a la funci\xf3n universalReceiver en el UniversalProfile.\n    * @param typeId Los datos enviados a la funci\xf3n universalReceiver en el UniversalProfile.\n    */\n    function universalReceiverDelegate(\n        address caller,\n        uint256 value,\n        bytes32 typeId,\n        bytes memory data\n    ) public override returns (bytes memory result) {\n        if (typeId == _TYPEID_LSP7_TOKENSRECIPIENT || typeId == _TYPEID_LSP8_TOKENSRECIPIENT){\n            revert ReceivingAssetsNotAllowed(caller, msg.sender);\n        }\n    }\n}\n\n')),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Por favor, aseg\xfarate de desbloquear MetaMask y desactivar la extensi\xf3n del navegador mientras realizas este paso.\n",(0,n.kt)("img",{alt:"Desactivar la extensi\xf3n del navegador para utilizar Remix Injected Provider",src:t(6051).Z,width:"3546",height:"1127"}))),(0,n.kt)("p",null,"Despu\xe9s de copiar el c\xf3digo, navega a la pesta\xf1a ",(0,n.kt)("strong",{parentName:"p"},"Solidity Compiler")," y pulsa el bot\xf3n Compile UniversalReceiverDelegate.sol. A continuaci\xf3n, navega a la pesta\xf1a ",(0,n.kt)("strong",{parentName:"p"},"Deploy & Run Transactions")," y elige ",(0,n.kt)("em",{parentName:"p"},"Injected Provider")," como entorno."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Compilando contrato en Remix",src:t(370).Z,width:"2592",height:"1542"})),(0,n.kt)("p",null,"Es necesario estar conectado a L16 en MetaMask y Remix y tener suficiente LYXt en el EOA utilizado para desplegar el URD."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Con\xe9ctate a LUKSO L16 en Remix",src:t(4157).Z,width:"2619",height:"1527"})),(0,n.kt)("p",null,"Despu\xe9s de elegir el contrato ",(0,n.kt)("strong",{parentName:"p"},"CustomUniversalReceiverDelegate")," en la secci\xf3n ",(0,n.kt)("em",{parentName:"p"},"CONTRACT")," y desplegarlo, tendr\xe1s que validar la transacci\xf3n y esperar a que se confirme y el contrato se despliegue en la red. Una vez desplegado, puedes copiar la direcci\xf3n del contrato para utilizarla m\xe1s tarde al establecer la direcci\xf3n dentro del almacenamiento."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Despliega y Copia la direcci\xf3n en Remix",src:t(3027).Z,width:"2535",height:"1577"})),(0,n.kt)("h3",{id:"fijar-la-direcci\xf3n-del-urd-en-el-almac\xe9n"},"Fijar la direcci\xf3n del URD en el almac\xe9n"),(0,n.kt)("p",null,"Despu\xe9s de desplegar el contrato, tenemos que establecer su direcci\xf3n en el ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/generic-standards/lsp1-universal-receiver#extension"},"LSP1-UniversalReceiverDelegate Data Key")),"."),(0,n.kt)("h3",{id:"instalar-dependencias"},"Instalar dependencias"),(0,n.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias antes de empezar este tutorial:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"O bien ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,n.kt)("inlineCode",{parentName:"a"},"web3.js"))," o bien ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,n.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,n.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},'Instalar las dependencias ```shell title="Install the dependencies" npm install web3 @lukso/lsp-smart-contracts ```'),(0,n.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instalar las dependencias"',title:'"Instalar',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,n.kt)("h3",{id:"importaciones-constantes-y-eoa"},"Importaciones, Constantes y EOA"),(0,n.kt)("p",null,"En primer lugar, necesitamos obtener los ",(0,n.kt)("em",{parentName:"p"},"ABIs")," de los contratos que utilizaremos m\xe1s adelante.\nDespu\xe9s necesitamos almacenar la direcci\xf3n de nuestro Perfil Universal y la nueva direcci\xf3n URD.",(0,n.kt)("br",{parentName:"p"}),"\n","Despu\xe9s inicializaremos la direcci\xf3n del controlador que se utilizar\xe1 m\xe1s tarde."),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,n.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,n.kt)("h3",{id:"crear-instancias-de-contratos"},"Crear instancias de contratos"),(0,n.kt)("p",null,"En este punto necesitamos crear instancias de los siguientes contratos:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp0-erc725account"},(0,n.kt)("strong",{parentName:"a"},"Perfil Universal"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp6-key-manager"},(0,n.kt)("strong",{parentName:"a"},"Gestor de Claves")))),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de contratos para el Gestor de Claves y el Perfil Universal"',title:'"Instancias',de:!0,contratos:!0,para:!0,el:!0,Gestor:!0,Claves:!0,y:!0,Perfil:!0,'Universal"':!0},"// crear una instancia del Perfil Universal\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// obt\xe9n el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del LSP6KeyManager\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n"))),(0,n.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de contratos para el Gestor de Claves y el Perfil Universal"',title:'"Instancias',de:!0,contratos:!0,para:!0,el:!0,Gestor:!0,Claves:!0,y:!0,Perfil:!0,'Universal"':!0},"// crear una instancia del Perfil Universal\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// obt\xe9n el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del LSP6KeyManager\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n")))),(0,n.kt)("h3",{id:"cifrar-el-calldata-setdata"},"Cifrar el calldata ",(0,n.kt)("inlineCode",{parentName:"h3"},"setData(...)"),"."),(0,n.kt)("p",null,"Cifra un calldata para ",(0,n.kt)("inlineCode",{parentName:"p"},"setData(bytes32,bytes)")," que actualizar\xe1 el URD del Perfil Universal."),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar un calldata que actualizar\xe1 el URD y sus permisos"',title:'"Cifrar',un:!0,calldata:!0,que:!0,"actualizar\xe1":!0,el:!0,URD:!0,y:!0,sus:!0,'permisos"':!0},"// cifrar setData Calldata en el Perfil Universal\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32,bytes)'\n](URD_DATA_KEY, universalProfileURDAddress).encodeABI();\n"))),(0,n.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar un calldata que actualizar\xe1 el URD y sus permisos"',title:'"Cifrar',un:!0,calldata:!0,que:!0,"actualizar\xe1":!0,el:!0,URD:!0,y:!0,sus:!0,'permisos"':!0},"// cifrar setData Calldata en el Perfil Universal\nconst setDataCalldata = await universalProfile.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [URD_DATA_KEY, universalProfileURDAddress],\n);\n")))),(0,n.kt)("h3",{id:"ejecutar-a-trav\xe9s-del-gestor-de-claves"},"Ejecutar a trav\xe9s del Gestor de Claves"),(0,n.kt)("p",null,"Por \xfaltimo, tenemos que enviar la transacci\xf3n que actualizar\xe1 el URD del Perfil Universal a trav\xe9s del Gestor de Claves."),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ejecutar el calldata en el Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Ejecutar',el:!0,calldata:!0,en:!0,Perfil:!0,Universal:!0,a:!0,"trav\xe9s":!0,del:!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el `setDataCalldata` en el Gestor de Claves\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: EOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,n.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ejecutar el calldata en el Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Ejecutar',el:!0,calldata:!0,en:!0,Perfil:!0,Universal:!0,a:!0,"trav\xe9s":!0,del:!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el `setDataCalldata` en el Gestor de Claves\nawait keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n")))),(0,n.kt)("h3",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,n.kt)(s.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n\n// crear una instancia del Perfil Universal\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// obt\xe9n el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del LSP6KeyManager\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n\n// cifrar setData Calldata en la B\xf3veda\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32,bytes)'\n](URD_DATA_KEY, universalProfileURDAddress).encodeABI();\n\n// ejecutar el executeCalldata en el Gestor de Claves\nawait keyManager.methods['execute(bytes)'](executeCalldata).send({\n  from: EOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,n.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport { ERC725YDataKeys } from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\nconst universalProfileURDAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n\n// crear una instancia del Perfil Universal\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// obt\xe9n el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del LSP6KeyManager\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\n// cifrar setData Calldata en la B\xf3veda\nconst setDataCalldata = await universalProfile.interface.encodeFunctionData(\n  'setData(bytes32,bytes)',\n  [URD_DATA_KEY, universalProfileURDAddress],\n);\n\n// ejecutar el executeCalldata en el Gestor de Claves\nawait keyManager.connect(EOA)['execute(bytes)'](executeCalldata);\n")))),(0,n.kt)("h2",{id:"aceptar-activos-espec\xedficos"},"Aceptar Activos espec\xedficos"),(0,n.kt)("p",null,"Para aceptar activos espec\xedficos, debes diferenciar entre los distintos activos que se te transfieren. Una forma de hacerlo es tener un mapeo dentro del contrato URD que establezca si el activo que se transfiere ",(0,n.kt)("strong",{parentName:"p"},"puede ser recibido o no"),". S\xf3lo el propietario deber\xeda poder a\xf1adir estas direcciones de activos. Para simplificar, el propietario podr\xeda ser la direcci\xf3n EOA que despliega el contrato."),(0,n.kt)("p",null,"Repite los pasos de implementaci\xf3n en la secci\xf3n ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"#rejecting-all-assets"},"Rechazar todos los activos"))," y sustituye el c\xf3digo de solidity por el que se escribe a continuaci\xf3n."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="Fragmento de c\xf3digo Solidity del URD personalizado que acepta activos espec\xedficos"',title:'"Fragmento',de:!0,"c\xf3digo":!0,Solidity:!0,del:!0,URD:!0,personalizado:!0,que:!0,acepta:!0,activos:!0,'espec\xedficos"':!0},'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// Este c\xf3digo s\xf3lo se utiliza a modo de gu\xeda, funciona pero no ha sido verificado ni auditado..\n\n// mdulos\nimport {LSP1UniversalReceiverDelegateUP} from "https://github.com/lukso-network/lsp-smart-contracts/blob/v0.6.2/contracts/LSP1UniversalReceiver/LSP1UniversalReceiverDelegateUP/LSP1UniversalReceiverDelegateUP.sol";\n\n// constant\xe9s\nimport {_TYPEID_LSP7_TOKENSRECIPIENT} from "https://github.com/lukso-network/lsp-smart-contracts/blob/v0.6.2/contracts/LSP7DigitalAsset/LSP7Constants.sol";\nimport {_TYPEID_LSP8_TOKENSRECIPIENT} from "https://github.com/lukso-network/lsp-smart-contracts/blob/v0.6.2/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol";\n\ncontract CustomUniversalReceiverDelegate is LSP1UniversalReceiverDelegateUP  {\n\n    address immutable public owner;\n    mapping (address => bool) public allowedAssets;\n\n    constructor(address _owner){\n        owner = _owner;\n    }\n\n    modifier onlyOwner(){\n        require(msg.sender == owner, "CustomUniversalReceiverDelegate : El que llama no es el propietario");\n        _;\n    }\n\n\n    function setAllowedAssets(address assets) public onlyOwner {\n        allowedAssets[assets] = true;\n    }\n    /**\n    * @dev Se revierte cuando el activo que se transfiere no est\xe1 permitido. Si se permite, la direcci\xf3n del activo\n    * se registrar\xe1 dentro del almac\xe9n, y se eliminar\xe1 cuando el saldo del activo sea igual a 0, seg\xfan\n    * el est\xe1ndar LSP5-ReceivedAssers.\n    *\n    * @param caller La direcci\xf3n del activo que informa a la funci\xf3n `universalReceiver(..)` en el UniversalProfile.\n    * @param value La cantidad de tokens nativos enviados por el emisor de la llamada a la funci\xf3n universalReceiver en el UniversalProfile.\n    * @param typeId El typeId que representa el contexto de la llamada a la funci\xf3n universalReceiver en el UniversalProfile.\n    * @param typeId Los datos enviados a la funci\xf3n universalReceiver en el UniversalProfile.\n    */\n    function universalReceiverDelegate(\n        address caller,\n        uint256 value,\n        bytes32 typeId,\n        bytes memory data\n    ) public override returns (bytes memory result){\n        // comprobar si el activo que se transfiere est\xe1 permitido o no.\n        if(typeId == _TYPEID_LSP8_TOKENSRECIPIENT || typeId == _TYPEID_LSP7_TOKENSRECIPIENT){\n            require(allowedAssets[caller], "No se ha autorizado la recepci\xf3n del activo que se transfiere");\n        }\n        // utilizando el c\xf3digo de implementaci\xf3n por defecto para registrar la direcci\xf3n de los activos recibidos\n        result = super.universalReceiverDelegate(caller, value, typeId, data);\n    }\n}\n')),(0,n.kt)("p",null,"El c\xf3digo de arriba registrar\xe1 la direcci\xf3n de los activos permitidos y los eliminar\xe1 cuando el saldo de la UP para este activo sea igual a 0. Tambi\xe9n rechazar\xe1 los activos que no est\xe9n permitidos. Como este c\xf3digo necesitar\xe1 ",(0,n.kt)("strong",{parentName:"p"},"[Permiso SUPER_SETDATA]","(../../standards/universal-profile/lsp6-key-manager. md#super-permissions)"),", despu\xe9s de desplegar establecer\xe1 la direcci\xf3n del URD en el almacenamiento usando el c\xf3digo de la secci\xf3n ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/guides/universal-receiver-delegate/set-default-implementation#set-the-address-of-the-urd-in-the-storage"},"Establecer la direcci\xf3n del URD en el almacenamiento")),"."))}m.isMDXComponent=!0},736:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/UniversalReceiverDelegate-Guide-f5859ba1a65be506a1333711bb641b64.jpeg"},370:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/remix-compiling-contract-69306a722de7dc3402212a1d312c7200.jpeg"},4157:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/remix-connect-l16-668ec673f2583efbe8d42692a6bb692f.jpeg"},3706:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/remix-creating-file-623cd12b4561f01cd7a3ef09ba1acbd2.jpeg"},3027:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/remix-deploy-copy-address-ae34db3793706f0fb1371adea92ec97b.jpeg"},6051:(e,a,t)=>{t.d(a,{Z:()=>r});const r=t.p+"assets/images/turn-off-browser-extension-e670c855042852daeee4d33320b4e008.jpeg"}}]);