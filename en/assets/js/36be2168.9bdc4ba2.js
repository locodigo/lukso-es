"use strict";(self.webpackChunklukso_docs=self.webpackChunklukso_docs||[]).push([[6007],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>m});var r=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,s=function(e,a){if(null==e)return{};var n,r,s={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=r.createContext({}),d=function(e){var a=r.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=d(e.components);return r.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,s=e.mdxType,t=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=s,v=p["".concat(o,".").concat(m)]||p[m]||u[m]||t;return n?r.createElement(v,l(l({ref:a},c),{},{components:n})):r.createElement(v,l({ref:a},c))}));function m(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var t=n.length,l=new Array(t);l[0]=p;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:s,l[1]=i;for(var d=2;d<t;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,a,n)=>{n.d(a,{Z:()=>l});var r=n(7294),s=n(6010);const t="tabItem_Ymn6";function l(e){let{children:a,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,s.Z)(t,l),hidden:n},a)}},4866:(e,a,n)=>{n.d(a,{Z:()=>k});var r=n(7462),s=n(7294),t=n(6010),l=n(2466),i=n(6775),o=n(1980),d=n(7392),c=n(12);function u(e){return function(e){return s.Children.map(e,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:n,attributes:r,default:s}}=e;return{value:a,label:n,attributes:r,default:s}}))}function p(e){const{values:a,children:n}=e;return(0,s.useMemo)((()=>{const e=a??u(n);return function(e){const a=(0,d.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function m(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function v(e){let{queryString:a=!1,groupId:n}=e;const r=(0,i.k6)(),t=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,o._X)(t),(0,s.useCallback)((e=>{if(!t)return;const a=new URLSearchParams(r.location.search);a.set(t,e),r.replace({...r.location,search:a.toString()})}),[t,r])]}function g(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,t=p(e),[l,i]=(0,s.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:t}))),[o,d]=v({queryString:n,groupId:r}),[u,g]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,t]=(0,c.Nk)(n);return[r,(0,s.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:r}),f=(()=>{const e=o??u;return m({value:e,tabValues:t})?e:null})();(0,s.useEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),g(e)}),[d,g,t]),tabValues:t}}var f=n(2389);const y="tabList__CuJ",P="tabItem_LNqP";function U(e){let{className:a,block:n,selectedValue:i,selectValue:o,tabValues:d}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),p=e=>{const a=e.currentTarget,n=c.indexOf(a),r=d[n].value;r!==i&&(u(a),o(r))},m=e=>{var a;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}null==(a=n)||a.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":n},a)},d.map((e=>{let{value:a,label:n,attributes:l}=e;return s.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>c.push(e),onKeyDown:m,onClick:p},l,{className:(0,t.Z)("tabs__item",P,null==l?void 0:l.className,{"tabs__item--active":i===a})}),n??a)})))}function b(e){let{lazy:a,children:n,selectedValue:r}=e;if(a){const e=n.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},n.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function D(e){const a=g(e);return s.createElement("div",{className:(0,t.Z)("tabs-container",y)},s.createElement(U,(0,r.Z)({},e,a)),s.createElement(b,(0,r.Z)({},e,a)))}function k(e){const a=(0,f.Z)();return s.createElement(D,(0,r.Z)({key:String(a)},e))}},8389:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var r=n(7462),s=(n(7294),n(3905)),t=n(4866),l=n(5162);const i={sidebar_label:"Establecer la implementaci\xf3n por defecto",sidebar_position:1},o="Establecer la implementaci\xf3n por defecto",d={unversionedId:"es/guides/universal-receiver-delegate/set-default-implementation",id:"es/guides/universal-receiver-delegate/set-default-implementation",title:"Establecer la implementaci\xf3n por defecto",description:"Los usuarios que desplieguen sus Perfiles Universales siguiendo las gu\xedas que utilizan lsp-factory o la Extensi\xf3n del navegador pueden saltarse esta gu\xeda, ya que este contrato ya est\xe1 desplegado y configurado para sus perfiles.",source:"@site/docs/es/guides/universal-receiver-delegate/set-default-implementation.md",sourceDirName:"es/guides/universal-receiver-delegate",slug:"/es/guides/universal-receiver-delegate/set-default-implementation",permalink:"/lukso-es/en/es/guides/universal-receiver-delegate/set-default-implementation",draft:!1,editUrl:"https://github.com/lukso-network/docs/tree/main/docs/es/guides/universal-receiver-delegate/set-default-implementation.md",tags:[],version:"current",lastUpdatedAt:1680495619,formattedLastUpdatedAt:"Apr 3, 2023",sidebarPosition:1,frontMatter:{sidebar_label:"Establecer la implementaci\xf3n por defecto",sidebar_position:1},sidebar:"guidesSidebar",previous:{title:"Actualizar Gestor de Claves LSP6",permalink:"/lukso-es/en/es/guides/key-manager/upgrade-lsp6"},next:{title:"Aceptar y Rechazar Activos Digitales",permalink:"/lukso-es/en/es/guides/universal-receiver-delegate/accept-reject-assets"}},c={},u=[{value:"Configuraci\xf3n",id:"configuraci\xf3n",level:2},{value:"Paso 1 - Importaciones, Constantes y EOA",id:"paso-1---importaciones-constantes-y-eoa",level:2},{value:"Step 2 - Deploy the default Universal Receiver Delegate contract",id:"step-2---deploy-the-default-universal-receiver-delegate-contract",level:2},{value:"Crear una instancia de contrato",id:"crear-una-instancia-de-contrato",level:3},{value:"Enviar la transacci\xf3n de despliegue del contrato",id:"enviar-la-transacci\xf3n-de-despliegue-del-contrato",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final",level:3},{value:"Step 3 - Set the address of the URD in the storage",id:"step-3---set-the-address-of-the-urd-in-the-storage",level:2},{value:"Crear las instancias de los contratos",id:"crear-las-instancias-de-los-contratos",level:3},{value:"Registrar el URD en el UP + establecer los permisos del URD",id:"registrar-el-urd-en-el-up--establecer-los-permisos-del-urd",level:3},{value:"Cifrar datos de llamada <code>setData(..)</code>.",id:"cifrar-datos-de-llamada-setdata",level:3},{value:"Enviar transacci\xf3n a trav\xe9s del Gestor de Claves",id:"enviar-transacci\xf3n-a-trav\xe9s-del-gestor-de-claves",level:3},{value:"C\xf3digo final",id:"c\xf3digo-final-1",level:3},{value:"Final code - Deploy &amp; Update",id:"final-code---deploy--update",level:2}],p={toc:u};function m(e){let{components:a,...i}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,i,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"establecer-la-implementaci\xf3n-por-defecto"},"Establecer la implementaci\xf3n por defecto"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Los usuarios que desplieguen sus Perfiles Universales siguiendo las gu\xedas que utilizan ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/guides/universal-profile/create-profile"},"lsp-factory"))," o la ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/guides/browser-extension/create-a-universal-profile"},"Extensi\xf3n del navegador"))," pueden saltarse esta gu\xeda, ya que este contrato ya est\xe1 desplegado y configurado para sus perfiles.")),(0,s.kt)("p",null,"Esta gu\xeda te ense\xf1ar\xe1 c\xf3mo implementar y establecer la implementaci\xf3n predeterminada del ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/smart-contracts/lsp1-universal-receiver-delegate-up"},"Receptor Delegado Universal"))," (URD) utilizado por el Perfil Universal. Este contrato registrar\xe1 las direcciones de los ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/universal-profile/lsp5-received-assets"},"activos recibidos"))," y ",(0,s.kt)("strong",{parentName:"p"},"[b\xf3vedas]","(../../standards/universal-profile/lsp10-received-vaults. md)")," y los eliminar\xe1 cuando el saldo sea igual a 0. Este contrato requiere el permiso ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/en/es/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,s.kt)("strong",{parentName:"a"},(0,s.kt)("inlineCode",{parentName:"strong"},"SUPER_SETDATA")," Permission"))," para interactuar con el perfil a trav\xe9s del Gestor de Claves."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"UniversalReceiverDelegate estableciendo claves de datos en el perfil",src:n(4368).Z,width:"1410",height:"610"})),(0,s.kt)("h2",{id:"configuraci\xf3n"},"Configuraci\xf3n"),(0,s.kt)("p",null,"Aseg\xfarate de tener instaladas las siguientes dependencias antes de empezar este tutorial:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"O bien ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/web3/web3.js"},(0,s.kt)("inlineCode",{parentName:"a"},"web3.js"))," o bien ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ethers-io/ethers.js/"},(0,s.kt)("inlineCode",{parentName:"a"},"ethers.js"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/lukso-network/lsp-smart-contracts/"},(0,s.kt)("inlineCode",{parentName:"a"},"@lukso/lsp-smart-contracts")))),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instalar las dependencias"',title:'"Instalar',las:!0,'dependencias"':!0},"npm install web3 @lukso/lsp-smart-contracts\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Instalar las dependencias"',title:'"Instalar',las:!0,'dependencias"':!0},"npm install ethers @lukso/lsp-smart-contracts\n")))),(0,s.kt)("h2",{id:"paso-1---importaciones-constantes-y-eoa"},"Paso 1 - Importaciones, Constantes y EOA"),(0,s.kt)("p",null,"Para empezar necesitamos obtener los ",(0,s.kt)("em",{parentName:"p"},"ABIs")," de los contratos que vamos a utilizar y el ",(0,s.kt)("em",{parentName:"p"},"bytecode")," del ",(0,s.kt)("inlineCode",{parentName:"p"},"LSP1UniversalReceiverDelegateUP"),".",(0,s.kt)("br",{parentName:"p"}),"\n","A continuaci\xf3n almacenaremos la direcci\xf3n de nuestro perfil universal.",(0,s.kt)("br",{parentName:"p"}),"\n","Luego inicializaremos el EOA que utilizaremos m\xe1s adelante."),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Importaciones, Constantes y EOA"',title:'"Importaciones,',Constantes:!0,y:!0,'EOA"':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// configura tu  EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n")))),(0,s.kt)("h2",{id:"step-2---deploy-the-default-universal-receiver-delegate-contract"},"Step 2 - Deploy the default Universal Receiver Delegate contract"),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"El ",(0,s.kt)("strong",{parentName:"p"},"Perfil Universal")," y la ",(0,s.kt)("strong",{parentName:"p"},"B\xf3veda")," no utilizan la misma implementaci\xf3n del Receptor Delegado Universal.")),(0,s.kt)("h3",{id:"crear-una-instancia-de-contrato"},"Crear una instancia de contrato"),(0,s.kt)("p",null,"En este paso crearemos una instancia del URD del Perfil Universal que posteriormente utilizaremos para desplegar uno."),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancia de contrato del URD del Perfil Universal"',title:'"Instancia',de:!0,contrato:!0,del:!0,URD:!0,Perfil:!0,'Universal"':!0},"// crear una instancia del LSP1UniversalReceiverDelegateUP\nlet universalProfileURD = new web3.eth.Contract(\n  LSP1UniversalReceiverDelegateUP.abi,\n);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancia de contrato del URD del Perfil Universal"',title:'"Instancia',de:!0,contrato:!0,del:!0,URD:!0,Perfil:!0,'Universal"':!0},"// crear una F\xe1brica de Contratos LSP1UniversalReceiverDelegateUP\nlet universalProfileURDFactory = new ethers.ContractFactory(\n  LSP1UniversalReceiverDelegateUP.abi,\n  LSP1UniversalReceiverDelegateUP.bytecode,\n);\n")))),(0,s.kt)("h3",{id:"enviar-la-transacci\xf3n-de-despliegue-del-contrato"},"Enviar la transacci\xf3n de despliegue del contrato"),(0,s.kt)("p",null,"Env\xeda la transacci\xf3n de despliegue para obtener un URD reci\xe9n desplegado."),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar la transacci\xf3n para desplegar un nuevo URD del Perfil Universal"',title:'"Enviar',la:!0,"transacci\xf3n":!0,para:!0,desplegar:!0,un:!0,nuevo:!0,URD:!0,del:!0,Perfil:!0,'Universal"':!0},"// desplegar el contrato del Receptor Delegado Universal UP\nawait universalProfileURD\n  .deploy({\n    data: LSP1UniversalReceiverDelegateUP.bytecode,\n  })\n  .send({\n    from: EOA.address,\n    gas: 5_000_000,\n    gasPrice: '1000000000',\n  });\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Enviar la transacci\xf3n para desplegar un nuevo URD del Perfil Universal"',title:'"Enviar',la:!0,"transacci\xf3n":!0,para:!0,desplegar:!0,un:!0,nuevo:!0,URD:!0,del:!0,Perfil:!0,'Universal"':!0},"// desplegar el contrato del Receptor Delegado Universal UP\nconst universalProfileURD = await universalProfileURDFactory\n  .connect(EOA)\n  .deploy();\n")))),(0,s.kt)("h3",{id:"c\xf3digo-final"},"C\xf3digo final"),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Desplegar un Receptor Delegado Universal para el Perfil Universal"',title:'"Desplegar',un:!0,Receptor:!0,Delegado:!0,Universal:!0,para:!0,el:!0,Perfil:!0,'Universal"':!0},"const deployUniversalProfileURD = async () => {\n  // crear una instancia del LSP1UniversalReceiverDelegateUP\n  let universalProfileURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateUP.abi,\n  );\n\n  // desplegar el contrato del Receptor Delegado Universal UP\n  const universalProfileURDAddress = await universalProfileURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateUP.bytecode,\n    })\n    .send({\n      from: EOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => {\n      return receipt.contractAddress;\n    });\n\n  return universalProfileURDAddress;\n};\n\n// desplegar un nuevo URD del Perfil Universal y recuperar su direcci\xf3n\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Desplegar un Receptor Delegado Universal para el Perfil Universal"',title:'"Desplegar',un:!0,Receptor:!0,Delegado:!0,Universal:!0,para:!0,el:!0,Perfil:!0,'Universal"':!0},"const deployUniversalProfileURD = async () => {\n  // crear una F\xe1brica de Contratos LSP1UniversalReceiverDelegateUP\n  let universalProfileURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateUP.abi,\n    LSP1UniversalReceiverDelegateUP.bytecode,\n  );\n\n  // desplegar el contrato del Receptor Delegado Universal UP\n  const universalProfileURD = await universalProfileURDFactory\n    .connect(EOA)\n    .deploy();\n\n  return universalProfileURD.target;\n};\n\n// desplegar un nuevo URD del Perfil Universal y recuperar su direcci\xf3n\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n")))),(0,s.kt)("h2",{id:"step-3---set-the-address-of-the-urd-in-the-storage"},"Step 3 - Set the address of the URD in the storage"),(0,s.kt)("p",null,"After deploying the contract, we need to set its address under the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/generic-standards/lsp1-universal-receiver#extension"},"LSP1-UniversalReceiverDelegate Data Key"))," and grant it the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"/lukso-es/en/es/standards/universal-profile/lsp6-key-manager#super-permissions"},"SUPER_SETDATA"))," permission."),(0,s.kt)("h3",{id:"crear-las-instancias-de-los-contratos"},"Crear las instancias de los contratos"),(0,s.kt)("p",null,"En primer lugar necesitamos crear instancias para los siguientes contratos:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp0-erc725account"},(0,s.kt)("strong",{parentName:"a"},"Perfil universal"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/lukso-es/en/es/standards/universal-profile/lsp6-key-manager"},(0,s.kt)("strong",{parentName:"a"},"Gestor de Claves")))),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de Contratos para el Perfil Universal y Gestor de Claves"',title:'"Instancias',de:!0,Contratos:!0,para:!0,el:!0,Perfil:!0,Universal:!0,y:!0,Gestor:!0,'Claves"':!0},"// crear una instancia del Perfil Universal\nconst universalProfile = new web3.eth.Contract(\n  UniversalProfile.abi,\n  universalProfileAddress,\n);\n// obtener el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del Gestor de Claves\nconst keyManager = new web3.eth.Contract(LSP6KeyManager.abi, keyManagerAddress);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Instancias de Contratos para el Perfil Universal y Gestor de Claves"',title:'"Instancias',de:!0,Contratos:!0,para:!0,el:!0,Perfil:!0,Universal:!0,y:!0,Gestor:!0,'Claves"':!0},"// crear una instancia del Perfil Universal\nconst universalProfile = new ethers.Contract(\n  universalProfileAddress,\n  UniversalProfile.abi,\n);\n// obtener el propietario del Perfil Universal\n// en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\nconst keyManagerAddress = await universalProfile.methods.owner().call();\n// crear una instancia del Gestor de Claves\nconst keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n")))),(0,s.kt)("h3",{id:"registrar-el-urd-en-el-up--establecer-los-permisos-del-urd"},"Registrar el URD en el UP + establecer los permisos del URD"),(0,s.kt)("p",null,"Generar ",(0,s.kt)("em",{parentName:"p"},"Claves y Valores de Datos")," para ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/en/es/standards/generic-standards/lsp1-universal-receiver-delegate/#how-delegation-works"},(0,s.kt)("strong",{parentName:"a"},"a\xf1adir un URD"))," al Perfil Universal y para conceder ",(0,s.kt)("a",{parentName:"p",href:"/lukso-es/en/es/standards/universal-profile/lsp6-key-manager#super-permissions"},(0,s.kt)("strong",{parentName:"a"},"SUPER_SETDATA"))," permiso al ",(0,s.kt)("strong",{parentName:"p"},"URD"),"."),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar Claves y Valores de Datos para actualizar el URD y sus permisos"',title:'"Cifrar',Claves:!0,y:!0,Valores:!0,de:!0,Datos:!0,para:!0,actualizar:!0,el:!0,URD:!0,sus:!0,'permisos"':!0},"const addressPermissionsOldArrayLengthHex = await myUP.methods[\n  'getData(bytes32)'\n](ERC725YDataKeys.LSP6['AddressPermissions[]'].length).call();\n\nconst addressPermissionsNewArrayLength =\n  web3.utils.hexToNumber(addressPermissionsOldArrayLengthHex) + 1;\n\nconst addressPermissionsNewArrayLengthHex = web3.utils.padLeft(\n  web3.utils.numberToHex(addressPermissionsNewArrayLength),\n  64,\n);\n\n// el \xedndice bytes16 `addressPermissionsOldArrayLengthHex` servir\xe1 como \xedndice\nconst newElementIndexInArrayHex = addressPermissionsOldArrayLengthHex.substring(\n  34,\n  66,\n);\n\nconst dataKeys = [\n  URD_DATA_KEY,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n    newElementIndexInArrayHex,\n  ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n    universalProfileURDAddress.substring(2),\n];\nconst dataValues = [\n  universalProfileURDAddress,\n  addressPermissionsNewArrayLengthHex,\n  universalProfileURDAddress,\n  PERMISSIONS.SUPER_SETDATA,\n];\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar Claves y Valores de Datos para actualizar el URD y sus permisos"',title:'"Cifrar',Claves:!0,y:!0,Valores:!0,de:!0,Datos:!0,para:!0,actualizar:!0,el:!0,URD:!0,sus:!0,'permisos"':!0},"const addressPermissionsOldArrayLengthHex = await myUP['getData(bytes32)'](\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n);\n\nconst addressPermissionsNewArrayLength =\n  ethers.toNumber(addressPermissionsOldArrayLengthHex) + 1;\n\nconst addressPermissionsNewArrayLengthHex =\n  '0x' + addressPermissionsNewArrayLength2.toString(16).padStart(64, '0');\n\n// el \xedndice bytes16 `addressPermissionsOldArrayLengthHex` servir\xe1 como \xedndice\nconst newElementIndexInArrayHex = addressPermissionsOldArrayLengthHex.substring(\n  34,\n  66,\n);\n\nconst dataKeys = [\n  URD_DATA_KEY,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n    newElementIndexInArrayHex,\n  ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n    universalProfileURDAddress.substring(2),\n];\nconst dataValues = [\n  universalProfileURDAddress,\n  addressPermissionsNewArrayLengthHex,\n  universalProfileURDAddress,\n  PERMISSIONS.SUPER_SETDATA,\n];\n")))),(0,s.kt)("h3",{id:"cifrar-datos-de-llamada-setdata"},"Cifrar datos de llamada ",(0,s.kt)("inlineCode",{parentName:"h3"},"setData(..)"),"."),(0,s.kt)("p",null,"Cifra un calldata para ",(0,s.kt)("inlineCode",{parentName:"p"},"setData(bytes32[],bytes[])")," usando las ",(0,s.kt)("em",{parentName:"p"},"dataKeys")," & ",(0,s.kt)("em",{parentName:"p"},"dataValues")," generadas en el ",(0,s.kt)("a",{parentName:"p",href:"#paso-32---encode-new-permissions-data-keys--values"},(0,s.kt)("strong",{parentName:"a"},"paso anterior")),"."),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar un calldata que actualizar\xe1 el URD y sus permisos"',title:'"Cifrar',un:!0,calldata:!0,que:!0,"actualizar\xe1":!0,el:!0,URD:!0,y:!0,sus:!0,'permisos"':!0},"// cifrar setData Calldata en el Perfil Universal\nconst setDataCalldata = await universalProfile.methods[\n  'setData(bytes32[],bytes[])'\n](dataKeys, dataValues).encodeABI();\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cifrar un calldata que actualizar\xe1 el URD y sus permisos"',title:'"Cifrar',un:!0,calldata:!0,que:!0,"actualizar\xe1":!0,el:!0,URD:!0,y:!0,sus:!0,'permisos"':!0},"// cifrar setData Calldata en el Perfil Universal\nconst setDataCalldata = await universalProfile.interface.encodeFunctionData(\n  'setData(bytes32[],bytes[])',\n  [dataKeys, dataValues],\n);\n")))),(0,s.kt)("h3",{id:"enviar-transacci\xf3n-a-trav\xe9s-del-gestor-de-claves"},"Enviar transacci\xf3n a trav\xe9s del Gestor de Claves"),(0,s.kt)("p",null,"Por \xfaltimo, debemos enviar la transacci\xf3n que actualizar\xe1 el URD y sus permisos en el Perfil Universal a trav\xe9s del Gestor de Claves."),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ejecutar el calldata en el Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Ejecutar',el:!0,calldata:!0,en:!0,Perfil:!0,Universal:!0,a:!0,"trav\xe9s":!0,del:!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el `setDataCalldata` en el Gestor de Claves\nawait keyManager.methods['execute(bytes)'](setDataCalldata).send({\n  from: EOA.address,\n  gasLimit: 600_000,\n});\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ejecutar el calldata en el Perfil Universal a trav\xe9s del Gestor de Claves"',title:'"Ejecutar',el:!0,calldata:!0,en:!0,Perfil:!0,Universal:!0,a:!0,"trav\xe9s":!0,del:!0,Gestor:!0,de:!0,'Claves"':!0},"// ejecutar el `setDataCalldata` en el Gestor de Claves\nawait keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n")))),(0,s.kt)("h3",{id:"c\xf3digo-final-1"},"C\xf3digo final"),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Actualizar el URD del Perfil Universal y sus permisos"',title:'"Actualizar',el:!0,URD:!0,del:!0,Perfil:!0,Universal:!0,y:!0,sus:!0,'permisos"':!0},"const updateUniversalProfileURD = async (vaultURDAddress) => {\n  // crear una instancia del Perfil Universal\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del Gestor de Claves\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  const addressPermissionsOldArrayLengthHex = await myUP.methods[\n    'getData(bytes32)'\n  ](ERC725YDataKeys.LSP6['AddressPermissions[]'].length).call();\n\n  const addressPermissionsNewArrayLength =\n    web3.utils.hexToNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex = web3.utils.padLeft(\n    web3.utils.numberToHex(addressPermissionsNewArrayLength),\n    64,\n  );\n\n  // el \xedndice bytes16 `addressPermissionsOldArrayLengthHex` servir\xe1 como \xedndice\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // cifrar setData Calldata en el Perfil Universal\n  const setDataCalldata = await universalProfile.methods[\n    'setData(bytes32[],bytes[])'\n  ](dataKeys, dataValues).encodeABI();\n\n  // ejecutar el `setDataCalldata` en el Gestor de Claves\n  await keyManager.methods['execute(bytes)'](setDataCalldata).send({\n    from: EOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// actualizar el URD del Perfil Universal\nawait updateUniversalProfileURD(vaultURDAddress);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Actualizar el URD del Perfil Universal y sus permisos"',title:'"Actualizar',el:!0,URD:!0,del:!0,Perfil:!0,Universal:!0,y:!0,sus:!0,'permisos"':!0},"const updateUniversalProfileURD = async (vaultURDAddress) => {\n  // crear una instancia del Perfil Universal\n  const universalProfile = new ethers.Contract(\n    universalProfileAddress,\n    UniversalProfile.abi,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del Gestor de Claves\n  const keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\n  const addressPermissionsOldArrayLengthHex = await myUP['getData(bytes32)'](\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  );\n\n  const addressPermissionsNewArrayLength =\n    ethers.toNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex =\n    '0x' + addressPermissionsNewArrayLength2.toString(16).padStart(64, '0');\n\n  // el \xedndice bytes16 `addressPermissionsOldArrayLengthHex` servir\xe1 como \xedndice\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // cifrar setData Calldata en el Perfil Universal\n  const setDataCalldata = await universalProfile.interface.encodeFunctionData(\n    'setData(bytes32[],bytes[])',\n    [dataKeys, dataValues],\n  );\n\n  // ejecutar el `setDataCalldata` en el Gestor de Claves\n  await keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n};\n\n// actualizar el URD del Perfil Universal\nawait updateUniversalProfileURD(vaultURDAddress);\n")))),(0,s.kt)("h2",{id:"final-code---deploy--update"},"Final code - Deploy & Update"),(0,s.kt)(t.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"web3js",label:"web3.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Desplegar un URD de Perfil Universal, actualizar sus permisos y a\xf1adirlo al Perfil Universal."',title:'"Desplegar',un:!0,URD:!0,de:!0,Perfil:!0,"Universal,":!0,actualizar:!0,sus:!0,permisos:!0,y:!0,"a\xf1adirlo":!0,al:!0,'Universal."':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport Web3 from 'web3';\n\n// constantes\nconst web3 = new Web3('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// configura tu EOA\nconst privateKey = '0x...';\nconst EOA = web3.eth.accounts.wallet.add(privateKey);\n\nconst deployUniversalProfileURD = async () => {\n  // crear una instancia del LSP1UniversalReceiverDelegateUP\n  let universalProfileURD = new web3.eth.Contract(\n    LSP1UniversalReceiverDelegateUP.abi,\n  );\n\n  // desplegar el contrato del Receptor Delegado Universal UP\n  const universalProfileURDAddress = await universalProfileURD\n    .deploy({\n      data: LSP1UniversalReceiverDelegateUP.bytecode,\n    })\n    .send({\n      from: EOA.address,\n      gas: 5_000_000,\n      gasPrice: '1000000000',\n    })\n    .on('receipt', (receipt) => {\n      return receipt.contractAddress;\n    });\n\n  return universalProfileURDAddress;\n};\n\nconst updateUniversalProfileURD = async (vaultURDAddress) => {\n  // crear una instancia del Perfil Universal\n  const universalProfile = new web3.eth.Contract(\n    UniversalProfile.abi,\n    universalProfileAddress,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del Gestor de Claves\n  const keyManager = new web3.eth.Contract(\n    LSP6KeyManager.abi,\n    keyManagerAddress,\n  );\n\n  const addressPermissionsOldArrayLengthHex = await myUP.methods[\n    'getData(bytes32)'\n  ](ERC725YDataKeys.LSP6['AddressPermissions[]'].length).call();\n\n  const addressPermissionsNewArrayLength =\n    web3.utils.hexToNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex = web3.utils.padLeft(\n    web3.utils.numberToHex(addressPermissionsNewArrayLength),\n    64,\n  );\n\n  // el \xedndice bytes16 `addressPermissionsOldArrayLengthHex` servir\xe1 como \xedndice\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // cifrar setData Calldata en el Perfil Universal\n  const setDataCalldata = await universalProfile.methods[\n    'setData(bytes32[],bytes[])'\n  ](dataKeys, dataValues).encodeABI();\n\n  // ejecutar el `setDataCalldata` en el Gestor de Claves\n  await keyManager.methods['execute(bytes)'](setDataCalldata).send({\n    from: EOA.address,\n    gasLimit: 600_000,\n  });\n};\n\n// desplegar un nuevo URD del Perfil Universal y recuperar su direcci\xf3n\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n\n// actualizar el URD del Perfil Universal\nawait updateUniversalProfileURD(vaultURDAddress);\n"))),(0,s.kt)(l.Z,{value:"ethersjs",label:"ethers.js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Desplegar un URD de Perfil Universal, actualizar sus permisos y a\xf1adirlo al Perfil Universal."',title:'"Desplegar',un:!0,URD:!0,de:!0,Perfil:!0,"Universal,":!0,actualizar:!0,sus:!0,permisos:!0,y:!0,"a\xf1adirlo":!0,al:!0,'Universal."':!0},"import LSP1UniversalReceiverDelegateUP from '@lukso/lsp-smart-contracts/artifacts/LSP1UniversalReceiverDelegateUP.json';\nimport UniversalProfile from '@lukso/lsp-smart-contracts/artifacts/UniversalProfile.json';\nimport LSP6KeyManager from '@lukso/lsp-smart-contracts/artifacts/LSP6KeyManager.json';\nimport {\n  ERC725YDataKeys,\n  PERMISSIONS,\n} from '@lukso/lsp-smart-contracts/constants.js';\nimport { ethers } from 'ethers';\n\n// constantes\nconst provider = new ethers.JsonRpcProvider('https://rpc.l16.lukso.network');\nconst URD_DATA_KEY = ERC725YDataKeys.LSP1.LSP1UniversalReceiverDelegate;\nconst universalProfileAddress = '0x...';\n\n// configura tu  EOA\nconst privateKey = '0x...'; // tu clave privada EOA (direcci\xf3n del controlador)\nconst EOA = new ethers.Wallet(privateKey).connect(provider);\n\nconst deployUniversalProfileURD = async () => {\n  // crear una F\xe1brica de Contratos LSP1UniversalReceiverDelegateUP\n  let universalProfileURDFactory = new ethers.ContractFactory(\n    LSP1UniversalReceiverDelegateUP.abi,\n    LSP1UniversalReceiverDelegateUP.bytecode,\n  );\n\n  // desplegar el contrato del Receptor Delegado Universal UP\n  const universalProfileURD = await universalProfileURDFactory\n    .connect(EOA)\n    .deploy();\n\n  return universalProfileURD.target;\n};\n\nconst updateUniversalProfileURD = async (vaultURDAddress) => {\n  // crear una instancia del Perfil Universal\n  const universalProfile = new ethers.Contract(\n    universalProfileAddress,\n    UniversalProfile.abi,\n  );\n  // obtener el propietario del Perfil Universal\n  // en nuestro caso deber\xeda ser la direcci\xf3n del Gestor de Claves\n  const keyManagerAddress = await universalProfile.methods.owner().call();\n  // crear una instancia del Gestor de Claves\n  const keyManager = new ethers.Contract(keyManagerAddress, LSP6KeyManager.abi);\n\n  const addressPermissionsOldArrayLengthHex = await myUP['getData(bytes32)'](\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n  );\n\n  const addressPermissionsNewArrayLength =\n    ethers.toNumber(addressPermissionsOldArrayLengthHex) + 1;\n\n  const addressPermissionsNewArrayLengthHex =\n    '0x' + addressPermissionsNewArrayLength2.toString(16).padStart(64, '0');\n\n  // el \xedndice bytes16 `addressPermissionsOldArrayLengthHex` servir\xe1 como \xedndice\n  const newElementIndexInArrayHex =\n    addressPermissionsOldArrayLengthHex.substring(34, 66);\n\n  const dataKeys = [\n    URD_DATA_KEY,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].length,\n    ERC725YDataKeys.LSP6['AddressPermissions[]'].index +\n      newElementIndexInArrayHex,\n    ERC725YDataKeys.LSP6['AddressPermissions:Permissions'] +\n      universalProfileURDAddress.substring(2),\n  ];\n  const dataValues = [\n    universalProfileURDAddress,\n    addressPermissionsNewArrayLengthHex,\n    universalProfileURDAddress,\n    PERMISSIONS.SUPER_SETDATA,\n  ];\n\n  // cifrar setData Calldata en el Perfil Universal\n  const setDataCalldata = await universalProfile.interface.encodeFunctionData(\n    'setData(bytes32[],bytes[])',\n    [dataKeys, dataValues],\n  );\n\n  // ejecutar el `setDataCalldata` en el Gestor de Claves\n  await keyManager.connect(EOA)['execute(bytes)'](setDataCalldata);\n};\n\n// desplegar un nuevo URD del Perfil Universal y recuperar su direcci\xf3n\nconst universalProfileURDAddress = await deployUniversalProfileURD();\n\n// actualizar el URD del Perfil Universal\nawait updateUniversalProfileURD(vaultURDAddress);\n")))))}m.isMDXComponent=!0},4368:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/token-transfer-4-7db56efafbc48ac08f9d8a37985e31de.jpg"}}]);